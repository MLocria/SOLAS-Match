<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin 0.9.4
// Source: ArchivedProject.proto
//   Date: 2013-04-16 15:58:03

namespace  {

  class ArchivedProject extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $id = null;
    
    /**  @var string */
    public $title = null;
    
    /**  @var string */
    public $description = null;
    
    /**  @var string */
    public $impact = null;
    
    /**  @var string */
    public $deadline = null;
    
    /**  @var int */
    public $organisationId = null;
    
    /**  @var string */
    public $reference = null;
    
    /**  @var int */
    public $wordCount = null;
    
    /**  @var string */
    public $createdTime = null;
    
    /**  @var string */
    public $languageCode = null;
    
    /**  @var string */
    public $countryCode = null;
    
    /**  @var string */
    public $archivedDate = null;
    
    /**  @var int */
    public $translatorId = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, '.ArchivedProject');

      // OPTIONAL INT32 id = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "id";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING title = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "title";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING description = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "description";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING impact = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "impact";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING deadline = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "deadline";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 organisationId = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "organisationId";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING reference = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "reference";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 wordCount = 8
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 8;
      $f->name      = "wordCount";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING createdTime = 9
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 9;
      $f->name      = "createdTime";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING languageCode = 10
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10;
      $f->name      = "languageCode";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING countryCode = 11
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 11;
      $f->name      = "countryCode";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING archivedDate = 12
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 12;
      $f->name      = "archivedDate";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 translatorId = 13
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 13;
      $f->name      = "translatorId";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <id> has a value
     *
     * @return boolean
     */
    public function hasId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <id> value
     *
     * @return \ArchivedProject
     */
    public function clearId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <id> value
     *
     * @return int
     */
    public function getId(){
      return $this->_get(1);
    }
    
    /**
     * Set <id> value
     *
     * @param int $value
     * @return \ArchivedProject
     */
    public function setId( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <title> has a value
     *
     * @return boolean
     */
    public function hasTitle(){
      return $this->_has(2);
    }
    
    /**
     * Clear <title> value
     *
     * @return \ArchivedProject
     */
    public function clearTitle(){
      return $this->_clear(2);
    }
    
    /**
     * Get <title> value
     *
     * @return string
     */
    public function getTitle(){
      return $this->_get(2);
    }
    
    /**
     * Set <title> value
     *
     * @param string $value
     * @return \ArchivedProject
     */
    public function setTitle( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <description> has a value
     *
     * @return boolean
     */
    public function hasDescription(){
      return $this->_has(3);
    }
    
    /**
     * Clear <description> value
     *
     * @return \ArchivedProject
     */
    public function clearDescription(){
      return $this->_clear(3);
    }
    
    /**
     * Get <description> value
     *
     * @return string
     */
    public function getDescription(){
      return $this->_get(3);
    }
    
    /**
     * Set <description> value
     *
     * @param string $value
     * @return \ArchivedProject
     */
    public function setDescription( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <impact> has a value
     *
     * @return boolean
     */
    public function hasImpact(){
      return $this->_has(4);
    }
    
    /**
     * Clear <impact> value
     *
     * @return \ArchivedProject
     */
    public function clearImpact(){
      return $this->_clear(4);
    }
    
    /**
     * Get <impact> value
     *
     * @return string
     */
    public function getImpact(){
      return $this->_get(4);
    }
    
    /**
     * Set <impact> value
     *
     * @param string $value
     * @return \ArchivedProject
     */
    public function setImpact( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <deadline> has a value
     *
     * @return boolean
     */
    public function hasDeadline(){
      return $this->_has(5);
    }
    
    /**
     * Clear <deadline> value
     *
     * @return \ArchivedProject
     */
    public function clearDeadline(){
      return $this->_clear(5);
    }
    
    /**
     * Get <deadline> value
     *
     * @return string
     */
    public function getDeadline(){
      return $this->_get(5);
    }
    
    /**
     * Set <deadline> value
     *
     * @param string $value
     * @return \ArchivedProject
     */
    public function setDeadline( $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <organisationId> has a value
     *
     * @return boolean
     */
    public function hasOrganisationId(){
      return $this->_has(6);
    }
    
    /**
     * Clear <organisationId> value
     *
     * @return \ArchivedProject
     */
    public function clearOrganisationId(){
      return $this->_clear(6);
    }
    
    /**
     * Get <organisationId> value
     *
     * @return int
     */
    public function getOrganisationId(){
      return $this->_get(6);
    }
    
    /**
     * Set <organisationId> value
     *
     * @param int $value
     * @return \ArchivedProject
     */
    public function setOrganisationId( $value){
      return $this->_set(6, $value);
    }
    
    /**
     * Check if <reference> has a value
     *
     * @return boolean
     */
    public function hasReference(){
      return $this->_has(7);
    }
    
    /**
     * Clear <reference> value
     *
     * @return \ArchivedProject
     */
    public function clearReference(){
      return $this->_clear(7);
    }
    
    /**
     * Get <reference> value
     *
     * @return string
     */
    public function getReference(){
      return $this->_get(7);
    }
    
    /**
     * Set <reference> value
     *
     * @param string $value
     * @return \ArchivedProject
     */
    public function setReference( $value){
      return $this->_set(7, $value);
    }
    
    /**
     * Check if <wordCount> has a value
     *
     * @return boolean
     */
    public function hasWordCount(){
      return $this->_has(8);
    }
    
    /**
     * Clear <wordCount> value
     *
     * @return \ArchivedProject
     */
    public function clearWordCount(){
      return $this->_clear(8);
    }
    
    /**
     * Get <wordCount> value
     *
     * @return int
     */
    public function getWordCount(){
      return $this->_get(8);
    }
    
    /**
     * Set <wordCount> value
     *
     * @param int $value
     * @return \ArchivedProject
     */
    public function setWordCount( $value){
      return $this->_set(8, $value);
    }
    
    /**
     * Check if <createdTime> has a value
     *
     * @return boolean
     */
    public function hasCreatedTime(){
      return $this->_has(9);
    }
    
    /**
     * Clear <createdTime> value
     *
     * @return \ArchivedProject
     */
    public function clearCreatedTime(){
      return $this->_clear(9);
    }
    
    /**
     * Get <createdTime> value
     *
     * @return string
     */
    public function getCreatedTime(){
      return $this->_get(9);
    }
    
    /**
     * Set <createdTime> value
     *
     * @param string $value
     * @return \ArchivedProject
     */
    public function setCreatedTime( $value){
      return $this->_set(9, $value);
    }
    
    /**
     * Check if <languageCode> has a value
     *
     * @return boolean
     */
    public function hasLanguageCode(){
      return $this->_has(10);
    }
    
    /**
     * Clear <languageCode> value
     *
     * @return \ArchivedProject
     */
    public function clearLanguageCode(){
      return $this->_clear(10);
    }
    
    /**
     * Get <languageCode> value
     *
     * @return string
     */
    public function getLanguageCode(){
      return $this->_get(10);
    }
    
    /**
     * Set <languageCode> value
     *
     * @param string $value
     * @return \ArchivedProject
     */
    public function setLanguageCode( $value){
      return $this->_set(10, $value);
    }
    
    /**
     * Check if <countryCode> has a value
     *
     * @return boolean
     */
    public function hasCountryCode(){
      return $this->_has(11);
    }
    
    /**
     * Clear <countryCode> value
     *
     * @return \ArchivedProject
     */
    public function clearCountryCode(){
      return $this->_clear(11);
    }
    
    /**
     * Get <countryCode> value
     *
     * @return string
     */
    public function getCountryCode(){
      return $this->_get(11);
    }
    
    /**
     * Set <countryCode> value
     *
     * @param string $value
     * @return \ArchivedProject
     */
    public function setCountryCode( $value){
      return $this->_set(11, $value);
    }
    
    /**
     * Check if <archivedDate> has a value
     *
     * @return boolean
     */
    public function hasArchivedDate(){
      return $this->_has(12);
    }
    
    /**
     * Clear <archivedDate> value
     *
     * @return \ArchivedProject
     */
    public function clearArchivedDate(){
      return $this->_clear(12);
    }
    
    /**
     * Get <archivedDate> value
     *
     * @return string
     */
    public function getArchivedDate(){
      return $this->_get(12);
    }
    
    /**
     * Set <archivedDate> value
     *
     * @param string $value
     * @return \ArchivedProject
     */
    public function setArchivedDate( $value){
      return $this->_set(12, $value);
    }
    
    /**
     * Check if <translatorId> has a value
     *
     * @return boolean
     */
    public function hasTranslatorId(){
      return $this->_has(13);
    }
    
    /**
     * Clear <translatorId> value
     *
     * @return \ArchivedProject
     */
    public function clearTranslatorId(){
      return $this->_clear(13);
    }
    
    /**
     * Get <translatorId> value
     *
     * @return int
     */
    public function getTranslatorId(){
      return $this->_get(13);
    }
    
    /**
     * Set <translatorId> value
     *
     * @param int $value
     * @return \ArchivedProject
     */
    public function setTranslatorId( $value){
      return $this->_set(13, $value);
    }
  }
}


<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin 0.9.4
// Source: ArchivedProjectMetaData.proto
//   Date: 2013-04-23 09:05:55

namespace  {

  class ArchivedProjectMetaData extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $archivedProjectId = null;
    
    /**  @var int */
    public $userIdArchived = null;
    
    /**  @var int */
    public $userIdProjectCreator = null;
    
    /**  @var string */
    public $fileName = null;
    
    /**  @var string */
    public $fileToken = null;
    
    /**  @var string */
    public $mimeType = null;
    
    /**  @var string */
    public $archivedDate = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, '.ArchivedProjectMetaData');

      // OPTIONAL INT32 archivedProjectId = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "archivedProjectId";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 userIdArchived = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "userIdArchived";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 userIdProjectCreator = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "userIdProjectCreator";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING fileName = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "fileName";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING fileToken = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "fileToken";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING mimeType = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "mimeType";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING archivedDate = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "archivedDate";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <archivedProjectId> has a value
     *
     * @return boolean
     */
    public function hasArchivedProjectId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <archivedProjectId> value
     *
     * @return \ArchivedProjectMetaData
     */
    public function clearArchivedProjectId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <archivedProjectId> value
     *
     * @return int
     */
    public function getArchivedProjectId(){
      return $this->_get(1);
    }
    
    /**
     * Set <archivedProjectId> value
     *
     * @param int $value
     * @return \ArchivedProjectMetaData
     */
    public function setArchivedProjectId( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <userIdArchived> has a value
     *
     * @return boolean
     */
    public function hasUserIdArchived(){
      return $this->_has(2);
    }
    
    /**
     * Clear <userIdArchived> value
     *
     * @return \ArchivedProjectMetaData
     */
    public function clearUserIdArchived(){
      return $this->_clear(2);
    }
    
    /**
     * Get <userIdArchived> value
     *
     * @return int
     */
    public function getUserIdArchived(){
      return $this->_get(2);
    }
    
    /**
     * Set <userIdArchived> value
     *
     * @param int $value
     * @return \ArchivedProjectMetaData
     */
    public function setUserIdArchived( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <userIdProjectCreator> has a value
     *
     * @return boolean
     */
    public function hasUserIdProjectCreator(){
      return $this->_has(3);
    }
    
    /**
     * Clear <userIdProjectCreator> value
     *
     * @return \ArchivedProjectMetaData
     */
    public function clearUserIdProjectCreator(){
      return $this->_clear(3);
    }
    
    /**
     * Get <userIdProjectCreator> value
     *
     * @return int
     */
    public function getUserIdProjectCreator(){
      return $this->_get(3);
    }
    
    /**
     * Set <userIdProjectCreator> value
     *
     * @param int $value
     * @return \ArchivedProjectMetaData
     */
    public function setUserIdProjectCreator( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <fileName> has a value
     *
     * @return boolean
     */
    public function hasFileName(){
      return $this->_has(4);
    }
    
    /**
     * Clear <fileName> value
     *
     * @return \ArchivedProjectMetaData
     */
    public function clearFileName(){
      return $this->_clear(4);
    }
    
    /**
     * Get <fileName> value
     *
     * @return string
     */
    public function getFileName(){
      return $this->_get(4);
    }
    
    /**
     * Set <fileName> value
     *
     * @param string $value
     * @return \ArchivedProjectMetaData
     */
    public function setFileName( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <fileToken> has a value
     *
     * @return boolean
     */
    public function hasFileToken(){
      return $this->_has(5);
    }
    
    /**
     * Clear <fileToken> value
     *
     * @return \ArchivedProjectMetaData
     */
    public function clearFileToken(){
      return $this->_clear(5);
    }
    
    /**
     * Get <fileToken> value
     *
     * @return string
     */
    public function getFileToken(){
      return $this->_get(5);
    }
    
    /**
     * Set <fileToken> value
     *
     * @param string $value
     * @return \ArchivedProjectMetaData
     */
    public function setFileToken( $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <mimeType> has a value
     *
     * @return boolean
     */
    public function hasMimeType(){
      return $this->_has(6);
    }
    
    /**
     * Clear <mimeType> value
     *
     * @return \ArchivedProjectMetaData
     */
    public function clearMimeType(){
      return $this->_clear(6);
    }
    
    /**
     * Get <mimeType> value
     *
     * @return string
     */
    public function getMimeType(){
      return $this->_get(6);
    }
    
    /**
     * Set <mimeType> value
     *
     * @param string $value
     * @return \ArchivedProjectMetaData
     */
    public function setMimeType( $value){
      return $this->_set(6, $value);
    }
    
    /**
     * Check if <archivedDate> has a value
     *
     * @return boolean
     */
    public function hasArchivedDate(){
      return $this->_has(7);
    }
    
    /**
     * Clear <archivedDate> value
     *
     * @return \ArchivedProjectMetaData
     */
    public function clearArchivedDate(){
      return $this->_clear(7);
    }
    
    /**
     * Get <archivedDate> value
     *
     * @return string
     */
    public function getArchivedDate(){
      return $this->_get(7);
    }
    
    /**
     * Set <archivedDate> value
     *
     * @param string $value
     * @return \ArchivedProjectMetaData
     */
    public function setArchivedDate( $value){
      return $this->_set(7, $value);
    }
  }
}


<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin 0.9.4
// Source: BannedUser.proto
//   Date: 2013-05-01 15:32:59

namespace  {

  class BannedUser extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $userId = null;
    
    /**  @var int */
    public $userIdAdmin = null;
    
    /**  @var string */
    public $banType = null;
    
    /**  @var string */
    public $comment = null;
    
    /**  @var string */
    public $bannedDate = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, '.BannedUser');

      // OPTIONAL INT32 userId = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "userId";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 userIdAdmin = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "userIdAdmin";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING banType = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "banType";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING comment = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "comment";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING bannedDate = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "bannedDate";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <userId> has a value
     *
     * @return boolean
     */
    public function hasUserId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <userId> value
     *
     * @return \BannedUser
     */
    public function clearUserId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <userId> value
     *
     * @return int
     */
    public function getUserId(){
      return $this->_get(1);
    }
    
    /**
     * Set <userId> value
     *
     * @param int $value
     * @return \BannedUser
     */
    public function setUserId( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <userIdAdmin> has a value
     *
     * @return boolean
     */
    public function hasUserIdAdmin(){
      return $this->_has(2);
    }
    
    /**
     * Clear <userIdAdmin> value
     *
     * @return \BannedUser
     */
    public function clearUserIdAdmin(){
      return $this->_clear(2);
    }
    
    /**
     * Get <userIdAdmin> value
     *
     * @return int
     */
    public function getUserIdAdmin(){
      return $this->_get(2);
    }
    
    /**
     * Set <userIdAdmin> value
     *
     * @param int $value
     * @return \BannedUser
     */
    public function setUserIdAdmin( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <banType> has a value
     *
     * @return boolean
     */
    public function hasBanType(){
      return $this->_has(3);
    }
    
    /**
     * Clear <banType> value
     *
     * @return \BannedUser
     */
    public function clearBanType(){
      return $this->_clear(3);
    }
    
    /**
     * Get <banType> value
     *
     * @return string
     */
    public function getBanType(){
      return $this->_get(3);
    }
    
    /**
     * Set <banType> value
     *
     * @param string $value
     * @return \BannedUser
     */
    public function setBanType( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <comment> has a value
     *
     * @return boolean
     */
    public function hasComment(){
      return $this->_has(4);
    }
    
    /**
     * Clear <comment> value
     *
     * @return \BannedUser
     */
    public function clearComment(){
      return $this->_clear(4);
    }
    
    /**
     * Get <comment> value
     *
     * @return string
     */
    public function getComment(){
      return $this->_get(4);
    }
    
    /**
     * Set <comment> value
     *
     * @param string $value
     * @return \BannedUser
     */
    public function setComment( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <bannedDate> has a value
     *
     * @return boolean
     */
    public function hasBannedDate(){
      return $this->_has(5);
    }
    
    /**
     * Clear <bannedDate> value
     *
     * @return \BannedUser
     */
    public function clearBannedDate(){
      return $this->_clear(5);
    }
    
    /**
     * Get <bannedDate> value
     *
     * @return string
     */
    public function getBannedDate(){
      return $this->_get(5);
    }
    
    /**
     * Set <bannedDate> value
     *
     * @param string $value
     * @return \BannedUser
     */
    public function setBannedDate( $value){
      return $this->_set(5, $value);
    }
  }
}


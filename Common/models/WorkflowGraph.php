<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin 0.9.4
// Source: WorkflowGraph.proto
//   Date: 2013-04-11 17:00:32

namespace  {

  class WorkflowGraph extends \DrSlump\Protobuf\Message {

    /**  @var \WorkflowNode[]  */
    public $rootNode = array();
    
    /**  @var int */
    public $projectId = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, '.WorkflowGraph');

      // REPEATED MESSAGE rootNode = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "rootNode";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\WorkflowNode';
      $descriptor->addField($f);

      // OPTIONAL INT32 projectId = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "projectId";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <rootNode> has a value
     *
     * @return boolean
     */
    public function hasRootNode(){
      return $this->_has(1);
    }
    
    /**
     * Clear <rootNode> value
     *
     * @return \WorkflowGraph
     */
    public function clearRootNode(){
      return $this->_clear(1);
    }
    
    /**
     * Get <rootNode> value
     *
     * @param int $idx
     * @return \WorkflowNode
     */
    public function getRootNode($idx = NULL){
      return $this->_get(1, $idx);
    }
    
    /**
     * Set <rootNode> value
     *
     * @param \WorkflowNode $value
     * @return \WorkflowGraph
     */
    public function setRootNode(\WorkflowNode $value, $idx = NULL){
      return $this->_set(1, $value, $idx);
    }
    
    /**
     * Get all elements of <rootNode>
     *
     * @return \WorkflowNode[]
     */
    public function getRootNodeList(){
     return $this->_get(1);
    }
    
    /**
     * Add a new element to <rootNode>
     *
     * @param \WorkflowNode $value
     * @return \WorkflowGraph
     */
    public function addRootNode(\WorkflowNode $value){
     return $this->_add(1, $value);
    }
    
    /**
     * Check if <projectId> has a value
     *
     * @return boolean
     */
    public function hasProjectId(){
      return $this->_has(2);
    }
    
    /**
     * Clear <projectId> value
     *
     * @return \WorkflowGraph
     */
    public function clearProjectId(){
      return $this->_clear(2);
    }
    
    /**
     * Get <projectId> value
     *
     * @return int
     */
    public function getProjectId(){
      return $this->_get(2);
    }
    
    /**
     * Set <projectId> value
     *
     * @param int $value
     * @return \WorkflowGraph
     */
    public function setProjectId( $value){
      return $this->_set(2, $value);
    }
  }
}


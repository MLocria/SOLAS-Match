<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin 0.9.4
// Source: Locale.proto
//   Date: 2013-04-16 15:58:04

namespace  {

  class Locale extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $languageName = null;
    
    /**  @var string */
    public $languageCode = null;
    
    /**  @var string */
    public $countryName = null;
    
    /**  @var string */
    public $countryCode = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, '.Locale');

      // OPTIONAL STRING languageName = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "languageName";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING languageCode = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "languageCode";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING countryName = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "countryName";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING countryCode = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "countryCode";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <languageName> has a value
     *
     * @return boolean
     */
    public function hasLanguageName(){
      return $this->_has(1);
    }
    
    /**
     * Clear <languageName> value
     *
     * @return \Locale
     */
    public function clearLanguageName(){
      return $this->_clear(1);
    }
    
    /**
     * Get <languageName> value
     *
     * @return string
     */
    public function getLanguageName(){
      return $this->_get(1);
    }
    
    /**
     * Set <languageName> value
     *
     * @param string $value
     * @return \Locale
     */
    public function setLanguageName( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <languageCode> has a value
     *
     * @return boolean
     */
    public function hasLanguageCode(){
      return $this->_has(2);
    }
    
    /**
     * Clear <languageCode> value
     *
     * @return \Locale
     */
    public function clearLanguageCode(){
      return $this->_clear(2);
    }
    
    /**
     * Get <languageCode> value
     *
     * @return string
     */
    public function getLanguageCode(){
      return $this->_get(2);
    }
    
    /**
     * Set <languageCode> value
     *
     * @param string $value
     * @return \Locale
     */
    public function setLanguageCode( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <countryName> has a value
     *
     * @return boolean
     */
    public function hasCountryName(){
      return $this->_has(3);
    }
    
    /**
     * Clear <countryName> value
     *
     * @return \Locale
     */
    public function clearCountryName(){
      return $this->_clear(3);
    }
    
    /**
     * Get <countryName> value
     *
     * @return string
     */
    public function getCountryName(){
      return $this->_get(3);
    }
    
    /**
     * Set <countryName> value
     *
     * @param string $value
     * @return \Locale
     */
    public function setCountryName( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <countryCode> has a value
     *
     * @return boolean
     */
    public function hasCountryCode(){
      return $this->_has(4);
    }
    
    /**
     * Clear <countryCode> value
     *
     * @return \Locale
     */
    public function clearCountryCode(){
      return $this->_clear(4);
    }
    
    /**
     * Get <countryCode> value
     *
     * @return string
     */
    public function getCountryCode(){
      return $this->_get(4);
    }
    
    /**
     * Set <countryCode> value
     *
     * @param string $value
     * @return \Locale
     */
    public function setCountryCode( $value){
      return $this->_set(4, $value);
    }
  }
}


<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin 0.9.4
// Source: Task.proto
//   Date: 2012-12-18 11:56:31

namespace  {

  class Task extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $id = null;
    
    /**  @var int */
    public $org_id = null;
    
    /**  @var string */
    public $title = null;
    
    /**  @var string */
    public $impact = null;
    
    /**  @var string */
    public $reference_page = null;
    
    /**  @var int */
    public $word_count = null;
    
    /**  @var int */
    public $source_lang_id = null;
    
    /**  @var int */
    public $target_lang_id = null;
    
    /**  @var string */
    public $created_time = null;
    
    /**  @var int */
    public $source_region_id = null;
    
    /**  @var int */
    public $target_region_id = null;
    
    /**  @var string */
    public $status = null;
    
    /**  @var string[]  */
    public $tags = array();
    
    /**  @var string */
    public $deadline = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, '.Task');

      // REQUIRED INT32 id = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "id";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // OPTIONAL INT32 org_id = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "org_id";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING title = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "title";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING impact = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "impact";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING reference_page = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "reference_page";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 word_count = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "word_count";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 source_lang_id = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "source_lang_id";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 target_lang_id = 8
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 8;
      $f->name      = "target_lang_id";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING created_time = 9
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 9;
      $f->name      = "created_time";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 source_region_id = 10
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10;
      $f->name      = "source_region_id";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 target_region_id = 11
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 11;
      $f->name      = "target_region_id";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING status = 12
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 12;
      $f->name      = "status";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REPEATED STRING tags = 13
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 13;
      $f->name      = "tags";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      // REQUIRED STRING deadline = 14
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 14;
      $f->name      = "deadline";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <id> has a value
     *
     * @return boolean
     */
    public function hasId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <id> value
     *
     * @return \Task
     */
    public function clearId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <id> value
     *
     * @return int
     */
    public function getId(){
      return $this->_get(1);
    }
    
    /**
     * Set <id> value
     *
     * @param int $value
     * @return \Task
     */
    public function setId( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <org_id> has a value
     *
     * @return boolean
     */
    public function hasOrgId(){
      return $this->_has(2);
    }
    
    /**
     * Clear <org_id> value
     *
     * @return \Task
     */
    public function clearOrgId(){
      return $this->_clear(2);
    }
    
    /**
     * Get <org_id> value
     *
     * @return int
     */
    public function getOrgId(){
      return $this->_get(2);
    }
    
    /**
     * Set <org_id> value
     *
     * @param int $value
     * @return \Task
     */
    public function setOrgId( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <title> has a value
     *
     * @return boolean
     */
    public function hasTitle(){
      return $this->_has(3);
    }
    
    /**
     * Clear <title> value
     *
     * @return \Task
     */
    public function clearTitle(){
      return $this->_clear(3);
    }
    
    /**
     * Get <title> value
     *
     * @return string
     */
    public function getTitle(){
      return $this->_get(3);
    }
    
    /**
     * Set <title> value
     *
     * @param string $value
     * @return \Task
     */
    public function setTitle( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <impact> has a value
     *
     * @return boolean
     */
    public function hasImpact(){
      return $this->_has(4);
    }
    
    /**
     * Clear <impact> value
     *
     * @return \Task
     */
    public function clearImpact(){
      return $this->_clear(4);
    }
    
    /**
     * Get <impact> value
     *
     * @return string
     */
    public function getImpact(){
      return $this->_get(4);
    }
    
    /**
     * Set <impact> value
     *
     * @param string $value
     * @return \Task
     */
    public function setImpact( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <reference_page> has a value
     *
     * @return boolean
     */
    public function hasReferencePage(){
      return $this->_has(5);
    }
    
    /**
     * Clear <reference_page> value
     *
     * @return \Task
     */
    public function clearReferencePage(){
      return $this->_clear(5);
    }
    
    /**
     * Get <reference_page> value
     *
     * @return string
     */
    public function getReferencePage(){
      return $this->_get(5);
    }
    
    /**
     * Set <reference_page> value
     *
     * @param string $value
     * @return \Task
     */
    public function setReferencePage( $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <word_count> has a value
     *
     * @return boolean
     */
    public function hasWordCount(){
      return $this->_has(6);
    }
    
    /**
     * Clear <word_count> value
     *
     * @return \Task
     */
    public function clearWordCount(){
      return $this->_clear(6);
    }
    
    /**
     * Get <word_count> value
     *
     * @return int
     */
    public function getWordCount(){
      return $this->_get(6);
    }
    
    /**
     * Set <word_count> value
     *
     * @param int $value
     * @return \Task
     */
    public function setWordCount( $value){
      return $this->_set(6, $value);
    }
    
    /**
     * Check if <source_lang_id> has a value
     *
     * @return boolean
     */
    public function hasSourceLangId(){
      return $this->_has(7);
    }
    
    /**
     * Clear <source_lang_id> value
     *
     * @return \Task
     */
    public function clearSourceLangId(){
      return $this->_clear(7);
    }
    
    /**
     * Get <source_lang_id> value
     *
     * @return int
     */
    public function getSourceLangId(){
      return $this->_get(7);
    }
    
    /**
     * Set <source_lang_id> value
     *
     * @param int $value
     * @return \Task
     */
    public function setSourceLangId( $value){
      return $this->_set(7, $value);
    }
    
    /**
     * Check if <target_lang_id> has a value
     *
     * @return boolean
     */
    public function hasTargetLangId(){
      return $this->_has(8);
    }
    
    /**
     * Clear <target_lang_id> value
     *
     * @return \Task
     */
    public function clearTargetLangId(){
      return $this->_clear(8);
    }
    
    /**
     * Get <target_lang_id> value
     *
     * @return int
     */
    public function getTargetLangId(){
      return $this->_get(8);
    }
    
    /**
     * Set <target_lang_id> value
     *
     * @param int $value
     * @return \Task
     */
    public function setTargetLangId( $value){
      return $this->_set(8, $value);
    }
    
    /**
     * Check if <created_time> has a value
     *
     * @return boolean
     */
    public function hasCreatedTime(){
      return $this->_has(9);
    }
    
    /**
     * Clear <created_time> value
     *
     * @return \Task
     */
    public function clearCreatedTime(){
      return $this->_clear(9);
    }
    
    /**
     * Get <created_time> value
     *
     * @return string
     */
    public function getCreatedTime(){
      return $this->_get(9);
    }
    
    /**
     * Set <created_time> value
     *
     * @param string $value
     * @return \Task
     */
    public function setCreatedTime( $value){
      return $this->_set(9, $value);
    }
    
    /**
     * Check if <source_region_id> has a value
     *
     * @return boolean
     */
    public function hasSourceRegionId(){
      return $this->_has(10);
    }
    
    /**
     * Clear <source_region_id> value
     *
     * @return \Task
     */
    public function clearSourceRegionId(){
      return $this->_clear(10);
    }
    
    /**
     * Get <source_region_id> value
     *
     * @return int
     */
    public function getSourceRegionId(){
      return $this->_get(10);
    }
    
    /**
     * Set <source_region_id> value
     *
     * @param int $value
     * @return \Task
     */
    public function setSourceRegionId( $value){
      return $this->_set(10, $value);
    }
    
    /**
     * Check if <target_region_id> has a value
     *
     * @return boolean
     */
    public function hasTargetRegionId(){
      return $this->_has(11);
    }
    
    /**
     * Clear <target_region_id> value
     *
     * @return \Task
     */
    public function clearTargetRegionId(){
      return $this->_clear(11);
    }
    
    /**
     * Get <target_region_id> value
     *
     * @return int
     */
    public function getTargetRegionId(){
      return $this->_get(11);
    }
    
    /**
     * Set <target_region_id> value
     *
     * @param int $value
     * @return \Task
     */
    public function setTargetRegionId( $value){
      return $this->_set(11, $value);
    }
    
    /**
     * Check if <status> has a value
     *
     * @return boolean
     */
    public function hasStatus(){
      return $this->_has(12);
    }
    
    /**
     * Clear <status> value
     *
     * @return \Task
     */
    public function clearStatus(){
      return $this->_clear(12);
    }
    
    /**
     * Get <status> value
     *
     * @return string
     */
    public function getStatus(){
      return $this->_get(12);
    }
    
    /**
     * Set <status> value
     *
     * @param string $value
     * @return \Task
     */
    public function setStatus( $value){
      return $this->_set(12, $value);
    }
    
    /**
     * Check if <tags> has a value
     *
     * @return boolean
     */
    public function hasTags(){
      return $this->_has(13);
    }
    
    /**
     * Clear <tags> value
     *
     * @return \Task
     */
    public function clearTags(){
      return $this->_clear(13);
    }
    
    /**
     * Get <tags> value
     *
     * @param int $idx
     * @return string
     */
    public function getTags($idx = NULL){
      return $this->_get(13, $idx);
    }
    
    /**
     * Set <tags> value
     *
     * @param string $value
     * @return \Task
     */
    public function setTags( $value, $idx = NULL){
      return $this->_set(13, $value, $idx);
    }
    
    /**
     * Get all elements of <tags>
     *
     * @return string[]
     */
    public function getTagsList(){
     return $this->_get(13);
    }
    
    /**
     * Add a new element to <tags>
     *
     * @param string $value
     * @return \Task
     */
    public function addTags( $value){
     return $this->_add(13, $value);
    }
    
    /**
     * Check if <deadline> has a value
     *
     * @return boolean
     */
    public function hasDeadline(){
      return $this->_has(14);
    }
    
    /**
     * Clear <deadline> value
     *
     * @return \Task
     */
    public function clearDeadline(){
      return $this->_clear(14);
    }
    
    /**
     * Get <deadline> value
     *
     * @return string
     */
    public function getDeadline(){
      return $this->_get(14);
    }
    
    /**
     * Set <deadline> value
     *
     * @param string $value
     * @return \Task
     */
    public function setDeadline( $value){
      return $this->_set(14, $value);
    }
  }
}


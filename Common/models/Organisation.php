<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin 0.9.4
// Source: Organisation.proto
//   Date: 2013-04-12 16:19:15

namespace  {

  class Organisation extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $id = null;
    
    /**  @var string */
    public $name = null;
    
    /**  @var string */
    public $biography = null;
    
    /**  @var string */
    public $homepage = null;
    
    /**  @var string */
    public $email = null;
    
    /**  @var string */
    public $address = null;
    
    /**  @var string */
    public $city = null;
    
    /**  @var string */
    public $country = null;
    
    /**  @var string */
    public $regionalFocus = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, '.Organisation');

      // OPTIONAL INT32 id = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "id";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING name = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING biography = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "biography";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING homepage = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "homepage";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING email = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "email";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING address = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "address";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING city = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "city";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING country = 8
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 8;
      $f->name      = "country";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING regionalFocus = 9
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 9;
      $f->name      = "regionalFocus";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <id> has a value
     *
     * @return boolean
     */
    public function hasId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <id> value
     *
     * @return \Organisation
     */
    public function clearId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <id> value
     *
     * @return int
     */
    public function getId(){
      return $this->_get(1);
    }
    
    /**
     * Set <id> value
     *
     * @param int $value
     * @return \Organisation
     */
    public function setId( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <name> has a value
     *
     * @return boolean
     */
    public function hasName(){
      return $this->_has(2);
    }
    
    /**
     * Clear <name> value
     *
     * @return \Organisation
     */
    public function clearName(){
      return $this->_clear(2);
    }
    
    /**
     * Get <name> value
     *
     * @return string
     */
    public function getName(){
      return $this->_get(2);
    }
    
    /**
     * Set <name> value
     *
     * @param string $value
     * @return \Organisation
     */
    public function setName( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <biography> has a value
     *
     * @return boolean
     */
    public function hasBiography(){
      return $this->_has(3);
    }
    
    /**
     * Clear <biography> value
     *
     * @return \Organisation
     */
    public function clearBiography(){
      return $this->_clear(3);
    }
    
    /**
     * Get <biography> value
     *
     * @return string
     */
    public function getBiography(){
      return $this->_get(3);
    }
    
    /**
     * Set <biography> value
     *
     * @param string $value
     * @return \Organisation
     */
    public function setBiography( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <homepage> has a value
     *
     * @return boolean
     */
    public function hasHomepage(){
      return $this->_has(4);
    }
    
    /**
     * Clear <homepage> value
     *
     * @return \Organisation
     */
    public function clearHomepage(){
      return $this->_clear(4);
    }
    
    /**
     * Get <homepage> value
     *
     * @return string
     */
    public function getHomepage(){
      return $this->_get(4);
    }
    
    /**
     * Set <homepage> value
     *
     * @param string $value
     * @return \Organisation
     */
    public function setHomepage( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <email> has a value
     *
     * @return boolean
     */
    public function hasEmail(){
      return $this->_has(5);
    }
    
    /**
     * Clear <email> value
     *
     * @return \Organisation
     */
    public function clearEmail(){
      return $this->_clear(5);
    }
    
    /**
     * Get <email> value
     *
     * @return string
     */
    public function getEmail(){
      return $this->_get(5);
    }
    
    /**
     * Set <email> value
     *
     * @param string $value
     * @return \Organisation
     */
    public function setEmail( $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <address> has a value
     *
     * @return boolean
     */
    public function hasAddress(){
      return $this->_has(6);
    }
    
    /**
     * Clear <address> value
     *
     * @return \Organisation
     */
    public function clearAddress(){
      return $this->_clear(6);
    }
    
    /**
     * Get <address> value
     *
     * @return string
     */
    public function getAddress(){
      return $this->_get(6);
    }
    
    /**
     * Set <address> value
     *
     * @param string $value
     * @return \Organisation
     */
    public function setAddress( $value){
      return $this->_set(6, $value);
    }
    
    /**
     * Check if <city> has a value
     *
     * @return boolean
     */
    public function hasCity(){
      return $this->_has(7);
    }
    
    /**
     * Clear <city> value
     *
     * @return \Organisation
     */
    public function clearCity(){
      return $this->_clear(7);
    }
    
    /**
     * Get <city> value
     *
     * @return string
     */
    public function getCity(){
      return $this->_get(7);
    }
    
    /**
     * Set <city> value
     *
     * @param string $value
     * @return \Organisation
     */
    public function setCity( $value){
      return $this->_set(7, $value);
    }
    
    /**
     * Check if <country> has a value
     *
     * @return boolean
     */
    public function hasCountry(){
      return $this->_has(8);
    }
    
    /**
     * Clear <country> value
     *
     * @return \Organisation
     */
    public function clearCountry(){
      return $this->_clear(8);
    }
    
    /**
     * Get <country> value
     *
     * @return string
     */
    public function getCountry(){
      return $this->_get(8);
    }
    
    /**
     * Set <country> value
     *
     * @param string $value
     * @return \Organisation
     */
    public function setCountry( $value){
      return $this->_set(8, $value);
    }
    
    /**
     * Check if <regionalFocus> has a value
     *
     * @return boolean
     */
    public function hasRegionalFocus(){
      return $this->_has(9);
    }
    
    /**
     * Clear <regionalFocus> value
     *
     * @return \Organisation
     */
    public function clearRegionalFocus(){
      return $this->_clear(9);
    }
    
    /**
     * Get <regionalFocus> value
     *
     * @return string
     */
    public function getRegionalFocus(){
      return $this->_get(9);
    }
    
    /**
     * Set <regionalFocus> value
     *
     * @param string $value
     * @return \Organisation
     */
    public function setRegionalFocus( $value){
      return $this->_set(9, $value);
    }
  }
}


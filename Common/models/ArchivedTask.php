<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin 0.9.4
// Source: ArchivedTask.proto
//   Date: 2013-04-11 10:23:26

namespace  {

  class ArchivedTask extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $id = null;
    
    /**  @var int */
    public $projectId = null;
    
    /**  @var string */
    public $title = null;
    
    /**  @var string */
    public $comment = null;
    
    /**  @var string */
    public $deadline = null;
    
    /**  @var int */
    public $wordCount = null;
    
    /**  @var string */
    public $createdTime = null;
    
    /**  @var string */
    public $sourceLanguageCode = null;
    
    /**  @var string */
    public $targetLanguageCode = null;
    
    /**  @var string */
    public $sourceCountryCode = null;
    
    /**  @var string */
    public $targetCountryCode = null;
    
    /**  @var string */
    public $taskType = null;
    
    /**  @var string */
    public $taskStatus = null;
    
    /**  @var boolean */
    public $published = null;
    
    /**  @var int */
    public $translatorId = null;
    
    /**  @var int */
    public $archiveUserId = null;
    
    /**  @var string */
    public $archiveDate = null;
    
    /**  @var string */
    public $tags = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, '.ArchivedTask');

      // OPTIONAL INT32 id = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "id";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 projectId = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "projectId";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING title = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "title";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING comment = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "comment";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING deadline = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "deadline";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 wordCount = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "wordCount";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING createdTime = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "createdTime";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING sourceLanguageCode = 8
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 8;
      $f->name      = "sourceLanguageCode";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING targetLanguageCode = 9
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 9;
      $f->name      = "targetLanguageCode";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING sourceCountryCode = 10
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10;
      $f->name      = "sourceCountryCode";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING targetCountryCode = 11
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 11;
      $f->name      = "targetCountryCode";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING taskType = 12
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 12;
      $f->name      = "taskType";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING taskStatus = 13
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 13;
      $f->name      = "taskStatus";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL BOOL published = 14
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 14;
      $f->name      = "published";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 translatorId = 15
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 15;
      $f->name      = "translatorId";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 archiveUserId = 16
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 16;
      $f->name      = "archiveUserId";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING archiveDate = 17
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 17;
      $f->name      = "archiveDate";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING tags = 18
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 18;
      $f->name      = "tags";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <id> has a value
     *
     * @return boolean
     */
    public function hasId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <id> value
     *
     * @return \ArchivedTask
     */
    public function clearId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <id> value
     *
     * @return int
     */
    public function getId(){
      return $this->_get(1);
    }
    
    /**
     * Set <id> value
     *
     * @param int $value
     * @return \ArchivedTask
     */
    public function setId( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <projectId> has a value
     *
     * @return boolean
     */
    public function hasProjectId(){
      return $this->_has(2);
    }
    
    /**
     * Clear <projectId> value
     *
     * @return \ArchivedTask
     */
    public function clearProjectId(){
      return $this->_clear(2);
    }
    
    /**
     * Get <projectId> value
     *
     * @return int
     */
    public function getProjectId(){
      return $this->_get(2);
    }
    
    /**
     * Set <projectId> value
     *
     * @param int $value
     * @return \ArchivedTask
     */
    public function setProjectId( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <title> has a value
     *
     * @return boolean
     */
    public function hasTitle(){
      return $this->_has(3);
    }
    
    /**
     * Clear <title> value
     *
     * @return \ArchivedTask
     */
    public function clearTitle(){
      return $this->_clear(3);
    }
    
    /**
     * Get <title> value
     *
     * @return string
     */
    public function getTitle(){
      return $this->_get(3);
    }
    
    /**
     * Set <title> value
     *
     * @param string $value
     * @return \ArchivedTask
     */
    public function setTitle( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <comment> has a value
     *
     * @return boolean
     */
    public function hasComment(){
      return $this->_has(4);
    }
    
    /**
     * Clear <comment> value
     *
     * @return \ArchivedTask
     */
    public function clearComment(){
      return $this->_clear(4);
    }
    
    /**
     * Get <comment> value
     *
     * @return string
     */
    public function getComment(){
      return $this->_get(4);
    }
    
    /**
     * Set <comment> value
     *
     * @param string $value
     * @return \ArchivedTask
     */
    public function setComment( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <deadline> has a value
     *
     * @return boolean
     */
    public function hasDeadline(){
      return $this->_has(5);
    }
    
    /**
     * Clear <deadline> value
     *
     * @return \ArchivedTask
     */
    public function clearDeadline(){
      return $this->_clear(5);
    }
    
    /**
     * Get <deadline> value
     *
     * @return string
     */
    public function getDeadline(){
      return $this->_get(5);
    }
    
    /**
     * Set <deadline> value
     *
     * @param string $value
     * @return \ArchivedTask
     */
    public function setDeadline( $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <wordCount> has a value
     *
     * @return boolean
     */
    public function hasWordCount(){
      return $this->_has(6);
    }
    
    /**
     * Clear <wordCount> value
     *
     * @return \ArchivedTask
     */
    public function clearWordCount(){
      return $this->_clear(6);
    }
    
    /**
     * Get <wordCount> value
     *
     * @return int
     */
    public function getWordCount(){
      return $this->_get(6);
    }
    
    /**
     * Set <wordCount> value
     *
     * @param int $value
     * @return \ArchivedTask
     */
    public function setWordCount( $value){
      return $this->_set(6, $value);
    }
    
    /**
     * Check if <createdTime> has a value
     *
     * @return boolean
     */
    public function hasCreatedTime(){
      return $this->_has(7);
    }
    
    /**
     * Clear <createdTime> value
     *
     * @return \ArchivedTask
     */
    public function clearCreatedTime(){
      return $this->_clear(7);
    }
    
    /**
     * Get <createdTime> value
     *
     * @return string
     */
    public function getCreatedTime(){
      return $this->_get(7);
    }
    
    /**
     * Set <createdTime> value
     *
     * @param string $value
     * @return \ArchivedTask
     */
    public function setCreatedTime( $value){
      return $this->_set(7, $value);
    }
    
    /**
     * Check if <sourceLanguageCode> has a value
     *
     * @return boolean
     */
    public function hasSourceLanguageCode(){
      return $this->_has(8);
    }
    
    /**
     * Clear <sourceLanguageCode> value
     *
     * @return \ArchivedTask
     */
    public function clearSourceLanguageCode(){
      return $this->_clear(8);
    }
    
    /**
     * Get <sourceLanguageCode> value
     *
     * @return string
     */
    public function getSourceLanguageCode(){
      return $this->_get(8);
    }
    
    /**
     * Set <sourceLanguageCode> value
     *
     * @param string $value
     * @return \ArchivedTask
     */
    public function setSourceLanguageCode( $value){
      return $this->_set(8, $value);
    }
    
    /**
     * Check if <targetLanguageCode> has a value
     *
     * @return boolean
     */
    public function hasTargetLanguageCode(){
      return $this->_has(9);
    }
    
    /**
     * Clear <targetLanguageCode> value
     *
     * @return \ArchivedTask
     */
    public function clearTargetLanguageCode(){
      return $this->_clear(9);
    }
    
    /**
     * Get <targetLanguageCode> value
     *
     * @return string
     */
    public function getTargetLanguageCode(){
      return $this->_get(9);
    }
    
    /**
     * Set <targetLanguageCode> value
     *
     * @param string $value
     * @return \ArchivedTask
     */
    public function setTargetLanguageCode( $value){
      return $this->_set(9, $value);
    }
    
    /**
     * Check if <sourceCountryCode> has a value
     *
     * @return boolean
     */
    public function hasSourceCountryCode(){
      return $this->_has(10);
    }
    
    /**
     * Clear <sourceCountryCode> value
     *
     * @return \ArchivedTask
     */
    public function clearSourceCountryCode(){
      return $this->_clear(10);
    }
    
    /**
     * Get <sourceCountryCode> value
     *
     * @return string
     */
    public function getSourceCountryCode(){
      return $this->_get(10);
    }
    
    /**
     * Set <sourceCountryCode> value
     *
     * @param string $value
     * @return \ArchivedTask
     */
    public function setSourceCountryCode( $value){
      return $this->_set(10, $value);
    }
    
    /**
     * Check if <targetCountryCode> has a value
     *
     * @return boolean
     */
    public function hasTargetCountryCode(){
      return $this->_has(11);
    }
    
    /**
     * Clear <targetCountryCode> value
     *
     * @return \ArchivedTask
     */
    public function clearTargetCountryCode(){
      return $this->_clear(11);
    }
    
    /**
     * Get <targetCountryCode> value
     *
     * @return string
     */
    public function getTargetCountryCode(){
      return $this->_get(11);
    }
    
    /**
     * Set <targetCountryCode> value
     *
     * @param string $value
     * @return \ArchivedTask
     */
    public function setTargetCountryCode( $value){
      return $this->_set(11, $value);
    }
    
    /**
     * Check if <taskType> has a value
     *
     * @return boolean
     */
    public function hasTaskType(){
      return $this->_has(12);
    }
    
    /**
     * Clear <taskType> value
     *
     * @return \ArchivedTask
     */
    public function clearTaskType(){
      return $this->_clear(12);
    }
    
    /**
     * Get <taskType> value
     *
     * @return string
     */
    public function getTaskType(){
      return $this->_get(12);
    }
    
    /**
     * Set <taskType> value
     *
     * @param string $value
     * @return \ArchivedTask
     */
    public function setTaskType( $value){
      return $this->_set(12, $value);
    }
    
    /**
     * Check if <taskStatus> has a value
     *
     * @return boolean
     */
    public function hasTaskStatus(){
      return $this->_has(13);
    }
    
    /**
     * Clear <taskStatus> value
     *
     * @return \ArchivedTask
     */
    public function clearTaskStatus(){
      return $this->_clear(13);
    }
    
    /**
     * Get <taskStatus> value
     *
     * @return string
     */
    public function getTaskStatus(){
      return $this->_get(13);
    }
    
    /**
     * Set <taskStatus> value
     *
     * @param string $value
     * @return \ArchivedTask
     */
    public function setTaskStatus( $value){
      return $this->_set(13, $value);
    }
    
    /**
     * Check if <published> has a value
     *
     * @return boolean
     */
    public function hasPublished(){
      return $this->_has(14);
    }
    
    /**
     * Clear <published> value
     *
     * @return \ArchivedTask
     */
    public function clearPublished(){
      return $this->_clear(14);
    }
    
    /**
     * Get <published> value
     *
     * @return boolean
     */
    public function getPublished(){
      return $this->_get(14);
    }
    
    /**
     * Set <published> value
     *
     * @param boolean $value
     * @return \ArchivedTask
     */
    public function setPublished( $value){
      return $this->_set(14, $value);
    }
    
    /**
     * Check if <translatorId> has a value
     *
     * @return boolean
     */
    public function hasTranslatorId(){
      return $this->_has(15);
    }
    
    /**
     * Clear <translatorId> value
     *
     * @return \ArchivedTask
     */
    public function clearTranslatorId(){
      return $this->_clear(15);
    }
    
    /**
     * Get <translatorId> value
     *
     * @return int
     */
    public function getTranslatorId(){
      return $this->_get(15);
    }
    
    /**
     * Set <translatorId> value
     *
     * @param int $value
     * @return \ArchivedTask
     */
    public function setTranslatorId( $value){
      return $this->_set(15, $value);
    }
    
    /**
     * Check if <archiveUserId> has a value
     *
     * @return boolean
     */
    public function hasArchiveUserId(){
      return $this->_has(16);
    }
    
    /**
     * Clear <archiveUserId> value
     *
     * @return \ArchivedTask
     */
    public function clearArchiveUserId(){
      return $this->_clear(16);
    }
    
    /**
     * Get <archiveUserId> value
     *
     * @return int
     */
    public function getArchiveUserId(){
      return $this->_get(16);
    }
    
    /**
     * Set <archiveUserId> value
     *
     * @param int $value
     * @return \ArchivedTask
     */
    public function setArchiveUserId( $value){
      return $this->_set(16, $value);
    }
    
    /**
     * Check if <archiveDate> has a value
     *
     * @return boolean
     */
    public function hasArchiveDate(){
      return $this->_has(17);
    }
    
    /**
     * Clear <archiveDate> value
     *
     * @return \ArchivedTask
     */
    public function clearArchiveDate(){
      return $this->_clear(17);
    }
    
    /**
     * Get <archiveDate> value
     *
     * @return string
     */
    public function getArchiveDate(){
      return $this->_get(17);
    }
    
    /**
     * Set <archiveDate> value
     *
     * @param string $value
     * @return \ArchivedTask
     */
    public function setArchiveDate( $value){
      return $this->_set(17, $value);
    }
    
    /**
     * Check if <tags> has a value
     *
     * @return boolean
     */
    public function hasTags(){
      return $this->_has(18);
    }
    
    /**
     * Clear <tags> value
     *
     * @return \ArchivedTask
     */
    public function clearTags(){
      return $this->_clear(18);
    }
    
    /**
     * Get <tags> value
     *
     * @return string
     */
    public function getTags(){
      return $this->_get(18);
    }
    
    /**
     * Set <tags> value
     *
     * @param string $value
     * @return \ArchivedTask
     */
    public function setTags( $value){
      return $this->_set(18, $value);
    }
  }
}


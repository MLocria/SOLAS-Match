<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin 0.9.4
// Source: WorkflowNode.proto
//   Date: 2014-03-05 17:53:47

namespace SolasMatch\Common\Protobufs\Models {

  class WorkflowNode extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $taskId = null;
    
    /**  @var \SolasMatch\Common\Protobufs\Models\Task */
    public $task = null;
    
    /**  @var int[]  */
    public $next = array();
    
    /**  @var int[]  */
    public $previous = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'SolasMatch.Common.Protobufs.Models.WorkflowNode');

      // REQUIRED INT32 taskId = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "taskId";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE task = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "task";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\SolasMatch\Common\Protobufs\Models\Task';
      $descriptor->addField($f);

      // REPEATED INT32 next = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "next";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      // REPEATED INT32 previous = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "previous";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <taskId> has a value
     *
     * @return boolean
     */
    public function hasTaskId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <taskId> value
     *
     * @return \SolasMatch\Common\Protobufs\Models\WorkflowNode
     */
    public function clearTaskId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <taskId> value
     *
     * @return int
     */
    public function getTaskId(){
      return $this->_get(1);
    }
    
    /**
     * Set <taskId> value
     *
     * @param int $value
     * @return \SolasMatch\Common\Protobufs\Models\WorkflowNode
     */
    public function setTaskId( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <task> has a value
     *
     * @return boolean
     */
    public function hasTask(){
      return $this->_has(2);
    }
    
    /**
     * Clear <task> value
     *
     * @return \SolasMatch\Common\Protobufs\Models\WorkflowNode
     */
    public function clearTask(){
      return $this->_clear(2);
    }
    
    /**
     * Get <task> value
     *
     * @return \SolasMatch\Common\Protobufs\Models\Task
     */
    public function getTask(){
      return $this->_get(2);
    }
    
    /**
     * Set <task> value
     *
     * @param \SolasMatch\Common\Protobufs\Models\Task $value
     * @return \SolasMatch\Common\Protobufs\Models\WorkflowNode
     */
    public function setTask(\SolasMatch\Common\Protobufs\Models\Task $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <next> has a value
     *
     * @return boolean
     */
    public function hasNext(){
      return $this->_has(3);
    }
    
    /**
     * Clear <next> value
     *
     * @return \SolasMatch\Common\Protobufs\Models\WorkflowNode
     */
    public function clearNext(){
      return $this->_clear(3);
    }
    
    /**
     * Get <next> value
     *
     * @param int $idx
     * @return int
     */
    public function getNext($idx = NULL){
      return $this->_get(3, $idx);
    }
    
    /**
     * Set <next> value
     *
     * @param int $value
     * @return \SolasMatch\Common\Protobufs\Models\WorkflowNode
     */
    public function setNext( $value, $idx = NULL){
      return $this->_set(3, $value, $idx);
    }
    
    /**
     * Get all elements of <next>
     *
     * @return int[]
     */
    public function getNextList(){
     return $this->_get(3);
    }
    
    /**
     * Add a new element to <next>
     *
     * @param int $value
     * @return \SolasMatch\Common\Protobufs\Models\WorkflowNode
     */
    public function addNext( $value){
     return $this->_add(3, $value);
    }
    
    /**
     * Check if <previous> has a value
     *
     * @return boolean
     */
    public function hasPrevious(){
      return $this->_has(4);
    }
    
    /**
     * Clear <previous> value
     *
     * @return \SolasMatch\Common\Protobufs\Models\WorkflowNode
     */
    public function clearPrevious(){
      return $this->_clear(4);
    }
    
    /**
     * Get <previous> value
     *
     * @param int $idx
     * @return int
     */
    public function getPrevious($idx = NULL){
      return $this->_get(4, $idx);
    }
    
    /**
     * Set <previous> value
     *
     * @param int $value
     * @return \SolasMatch\Common\Protobufs\Models\WorkflowNode
     */
    public function setPrevious( $value, $idx = NULL){
      return $this->_set(4, $value, $idx);
    }
    
    /**
     * Get all elements of <previous>
     *
     * @return int[]
     */
    public function getPreviousList(){
     return $this->_get(4);
    }
    
    /**
     * Add a new element to <previous>
     *
     * @param int $value
     * @return \SolasMatch\Common\Protobufs\Models\WorkflowNode
     */
    public function addPrevious( $value){
     return $this->_add(4, $value);
    }
  }
}


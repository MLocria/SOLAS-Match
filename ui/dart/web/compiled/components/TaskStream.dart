// Auto-generated from TaskStream.html.
// DO NOT EDIT.

library SolasMatchDart;

import 'dart:html' as autogenerated;
import 'dart:svg' as autogenerated_svg;
import 'package:web_ui/web_ui.dart' as autogenerated;
import 'package:web_ui/observe/observable.dart' as __observe;
import "package:web_ui/web_ui.dart";
import "dart:async";
import 'package:web_ui/watcher.dart' as watchers;
import "dart:json";
import '../../DataAccessObjects/TaskDao.dart';
import '../../DataAccessObjects/ProjectDao.dart';
import '../../DataAccessObjects/OrgDao.dart';
import '../../DataAccessObjects/LanguageDao.dart';
import '../../lib/models/Task.dart';
import '../../lib/models/Project.dart';
import '../../lib/models/Org.dart';
import '../../lib/models/Language.dart';
import '../../lib/Settings.dart';



class TaskStream extends WebComponent with Observable 
{
  /** Autogenerated from the template. */

  autogenerated.ScopedCssMapper _css;

  /** This field is deprecated, use getShadowRoot instead. */
  get _root => getShadowRoot("x-task-stream");
  static final __html1 = new autogenerated.Element.html('<h3>Filter Available Tasks</h3>'), __html10 = new autogenerated.Element.html('<div class="task" style="word-break: break-all; overflow-wrap: break-word;">\n              <h2>\n                <a></a>\n              </h2>\n              <p>Type:\n                <template></template>\n                <template></template>\n                <template></template>\n                <template></template>\n              </p>\n              <p></p>\n              <p></p>\n              <p>\n                Word Count: <strong></strong>\n              </p>\n              <p class="task_details">\n                Added: <strong></strong> ago\n              </p>\n              <p>\n                Due by: <strong></strong>\n              </p>\n              <template></template>\n              <br>\n            </div>'), __html11 = new autogenerated.Element.html('<span class="label label-info" style="background-color: {{taskOneColour}}">Segmentation</span>'), __html12 = new autogenerated.Element.html('<span class="label label-info" style="background-color: {{taskTwoColour}}">Translation</span>'), __html13 = new autogenerated.Element.html('<span class="label label-info" style="background-color: {{taskThreeColour}}">Proofreading</span>'), __html14 = new autogenerated.Element.html('<span class="label label-info" style="background-color: {{taskFourColour}}">Desegmentation</span>'), __html15 = new autogenerated.Element.tag('template'), __html16 = new autogenerated.Element.html('<p>\n                    Part of:\n                    <a></a>\n                    for\n                    <a></a>\n                  </p>'), __html17 = new autogenerated.Element.tag('template'), __html18 = new autogenerated.Element.html('<button>Load More</button>'), __html19 = new autogenerated.Element.html('<p>There are no tasks currently available</p>'), __html2 = new autogenerated.BRElement(), __html3 = new autogenerated.Element.html('<small>\n            <span style="color: red">*</span> Only languages that are active in the system are listed in the filter boxes.\n            If your language is not present then please check back again later.\n          </small>'), __html4 = new autogenerated.HRElement(), __html5 = new autogenerated.Element.html('<table>\n            <thead>\n              <tr><th>Task Type</th>\n              <th>Source Language <span style="color: red">*</span></th>\n              <th>Target Language <span style="color: red">*</span></th>\n            </tr></thead>\n            <tbody>\n              <tr>\n                <td>\n                  <select name="taskTypes"></select>\n                </td>\n                <td>\n                  <select name="sourceLanguage"></select>\n                </td>\n                <td>\n                  <select name="targetLanguage"></select>\n                </td>\n              </tr>\n              <tr>\n                <td>\n                  <button value="Filter" class="btn btn-primary">\n                    <i class="icon-refresh icon-white"></i> Filter Task Stream\n                  </button>\n                </td>\n              </tr>\n            </tbody>  \n          </table>'), __html6 = new autogenerated.OptionElement(), __html7 = new autogenerated.OptionElement(), __html8 = new autogenerated.OptionElement(), __html9 = new autogenerated.Element.tag('template'), __shadowTemplate = new autogenerated.DocumentFragment.html('''
        <template></template>
        <template></template>
        <template></template>
        <br>
      ''');
  autogenerated.Element __e11, __e45, __e46;
  autogenerated.Template __t;

  void created_autogenerated() {
    var __root = createShadowRoot("x-task-stream");
    setScopedCss("x-task-stream", new autogenerated.ScopedCssMapper({"x-task-stream":"[is=\"x-task-stream\"]"}));
    _css = getScopedCss("x-task-stream");
    __t = new autogenerated.Template(__root);
    __root.nodes.add(__shadowTemplate.clone(true));
    __e11 = __root.nodes[1];
    __t.conditional(__e11, () => userId > 0, (__t) {
      var __e10, __e2, __e5, __e8, __e9;
      __e10 = __html5.clone(true);
      __e2 = __e10.nodes[3].nodes[1].nodes[1].nodes[1];
      __t.listen(__e2.onChange, ($event) { selectedTaskTypeFilter = __e2.selectedIndex; });
      __t.oneWayBind(() => selectedTaskTypeFilter, (e) { if (__e2.selectedIndex != e) __e2.selectedIndex = e; }, false, false);
      __t.loopIterateAttr(__e2, () => taskTypeIndexes, ($list, $index, __t) {
        var key = $list[$index];
        var __e1;
        __e1 = __html6.clone(true);
        var __binding0 = __t.contentBind(() => taskTypes[key], false);
        __e1.nodes.add(__binding0);
        __t.oneWayBind(() => key.toString(), (e) { if (__e1.value != e) __e1.value = e; }, false, false);
      __t.addAll([new autogenerated.Text('\n                    '),
          __e1,
          new autogenerated.Text('\n                  ')]);
      });
      __e5 = __e10.nodes[3].nodes[1].nodes[3].nodes[1];
      __t.listen(__e5.onChange, ($event) { selectedSourceFilter = __e5.selectedIndex; });
      __t.oneWayBind(() => selectedSourceFilter, (e) { if (__e5.selectedIndex != e) __e5.selectedIndex = e; }, false, false);
      __t.loopIterateAttr(__e5, () => activeLanguages, ($list, $index, __t) {
        var language = $list[$index];
        var __e4;
        __e4 = __html7.clone(true);
        var __binding3 = __t.contentBind(() => language.name, false);
        __e4.nodes.add(__binding3);
        __t.oneWayBind(() => language.code, (e) { if (__e4.value != e) __e4.value = e; }, false, false);
      __t.addAll([new autogenerated.Text('\n                      '),
          __e4,
          new autogenerated.Text('\n                  ')]);
      });
      __e8 = __e10.nodes[3].nodes[1].nodes[5].nodes[1];
      __t.listen(__e8.onChange, ($event) { selectedTargetFilter = __e8.selectedIndex; });
      __t.oneWayBind(() => selectedTargetFilter, (e) { if (__e8.selectedIndex != e) __e8.selectedIndex = e; }, false, false);
      __t.loopIterateAttr(__e8, () => activeLanguages, ($list, $index, __t) {
        var language = $list[$index];
        var __e7;
        __e7 = __html8.clone(true);
        var __binding6 = __t.contentBind(() => language.name, false);
        __e7.nodes.add(__binding6);
        __t.oneWayBind(() => language.code, (e) { if (__e7.value != e) __e7.value = e; }, false, false);
      __t.addAll([new autogenerated.Text('\n                    '),
          __e7,
          new autogenerated.Text('\n                  ')]);
      });
      __e9 = __e10.nodes[3].nodes[3].nodes[1].nodes[1];
      __t.listen(__e9.onClick, ($event) { filterStream(); });
    __t.addAll([new autogenerated.Text('\n          '),
        __html1.clone(true),
        new autogenerated.Text('\n          '),
        __e10,
        new autogenerated.Text('\n          '),
        __html2.clone(true),
        new autogenerated.Text('\n          '),
        __html3.clone(true),
        new autogenerated.Text('\n          '),
        __html4.clone(true),
        new autogenerated.Text('\n        ')]);
    });

    __e45 = __root.nodes[3];
    __t.conditional(__e45, () => tasks.length > 0, (__t) {
      var __e42, __e44;
      __e42 = __html9.clone(true);
      __t.loop(__e42, () => tasks, ($list, $index, __t) {
        var task = $list[$index];
        var __e13, __e15, __e17, __e19, __e21, __e24, __e27, __e29, __e31, __e33, __e40, __e41;
        __e41 = __html10.clone(true);
        __e13 = __e41.nodes[1].nodes[1];
        var __binding12 = __t.contentBind(() => task.title, false);
        __e13.nodes.addAll([new autogenerated.Text('\n                  '),
            __binding12,
            new autogenerated.Text('\n                ')]);
        __t.bind(() => task.id,  (__e) { __e13.href = autogenerated.sanitizeUri('http://127.0.0.1/Solas-Match/task/${__e.newValue}/id'); }, false);
        __e15 = __e41.nodes[3].nodes[1];
        __t.conditional(__e15, () => task.taskType == 1, (__t) {
          var __e14;
          __e14 = __html11.clone(true);
          __t.bind(() => taskOneColour,  (__e) { __e14.attributes['style'] = 'background-color: ${__e.newValue}'; }, false);
        __t.addAll([new autogenerated.Text('\n                  '),
            __e14,
            new autogenerated.Text('\n                ')]);
        });

        __e17 = __e41.nodes[3].nodes[3];
        __t.conditional(__e17, () => task.taskType == 2, (__t) {
          var __e16;
          __e16 = __html12.clone(true);
          __t.bind(() => taskTwoColour,  (__e) { __e16.attributes['style'] = 'background-color: ${__e.newValue}'; }, false);
        __t.addAll([new autogenerated.Text('\n                  '),
            __e16,
            new autogenerated.Text('              \n                ')]);
        });

        __e19 = __e41.nodes[3].nodes[5];
        __t.conditional(__e19, () => task.taskType == 3, (__t) {
          var __e18;
          __e18 = __html13.clone(true);
          __t.bind(() => taskThreeColour,  (__e) { __e18.attributes['style'] = 'background-color: ${__e.newValue}'; }, false);
        __t.addAll([new autogenerated.Text('\n                  '),
            __e18,
            new autogenerated.Text('              \n                ')]);
        });

        __e21 = __e41.nodes[3].nodes[7];
        __t.conditional(__e21, () => task.taskType == 4, (__t) {
          var __e20;
          __e20 = __html14.clone(true);
          __t.bind(() => taskFourColour,  (__e) { __e20.attributes['style'] = 'background-color: ${__e.newValue}'; }, false);
        __t.addAll([new autogenerated.Text('\n                  '),
            __e20,
            new autogenerated.Text('              \n                ')]);
        });

        __e24 = __e41.nodes[5];
        var __binding22 = __t.contentBind(() => task.sourceLocale.languageName, false);
        var __binding23 = __t.contentBind(() => task.sourceLocale.countryName, false);
        __e24.nodes.addAll([new autogenerated.Text('\n                From: '),
            __binding22,
            new autogenerated.Text(' - '),
            __binding23,
            new autogenerated.Text('\n              ')]);
        __e27 = __e41.nodes[7];
        var __binding25 = __t.contentBind(() => task.targetLocale.languageName, false);
        var __binding26 = __t.contentBind(() => task.targetLocale.countryName, false);
        __e27.nodes.addAll([new autogenerated.Text('\n                To: '),
            __binding25,
            new autogenerated.Text(' - '),
            __binding26,
            new autogenerated.Text('\n              ')]);
        __e29 = __e41.nodes[9].nodes[1];
        var __binding28 = __t.contentBind(() => task.wordCount, false);
        __e29.nodes.add(__binding28);
        __e31 = __e41.nodes[11].nodes[1];
        var __binding30 = __t.contentBind(() => task.createdTime, false);
        __e31.nodes.add(__binding30);
        __e33 = __e41.nodes[13].nodes[1];
        var __binding32 = __t.contentBind(() => task.deadline, false);
        __e33.nodes.add(__binding32);
        __e40 = __e41.nodes[15];
        __t.conditional(__e40, () => projectMap[task.projectId] != null, (__t) {
          var __e39;
          __e39 = __html15.clone(true);
          __t.conditional(__e39, () => orgMap[projectMap[task.projectId].organisationId] != null, (__t) {
            var __e35, __e37, __e38;
            __e38 = __html16.clone(true);
            __e35 = __e38.nodes[1];
            var __binding34 = __t.contentBind(() => projectMap[task.projectId].title, false);
            __e35.nodes.addAll([new autogenerated.Text('\n                      '),
                __binding34,
                new autogenerated.Text('\n                    ')]);
            __t.bind(() => projectMap[task.projectId].id,  (__e) { __e35.href = autogenerated.sanitizeUri('http://127.0.0.1/Solas-Match/project/${__e.newValue}/view'); }, false);
            __e37 = __e38.nodes[3];
            var __binding36 = __t.contentBind(() => orgMap[projectMap[task.projectId].organisationId].name, false);
            __e37.nodes.addAll([new autogenerated.Text('\n                      '),
                __binding36,
                new autogenerated.Text('\n                    ')]);
            __t.bind(() => orgMap[projectMap[task.projectId].organisationId].id,  (__e) { __e37.href = autogenerated.sanitizeUri('http://127.0.0.1/Solas-Match/org/${__e.newValue}/profile'); }, false);
          __t.addAll([new autogenerated.Text('\n                  '),
              __e38,
              new autogenerated.Text('\n                ')]);
          });

        __t.addAll([new autogenerated.Text('\n                '),
            __e39,
            new autogenerated.Text('\n              ')]);
        });

      __t.addAll([new autogenerated.Text('\n            '),
          __e41,
          new autogenerated.Text('\n          ')]);
      });
      __e44 = __html17.clone(true);
      __t.conditional(__e44, () => moreTasks, (__t) {
        var __e43;
        __e43 = __html18.clone(true);
        __t.listen(__e43.onClick, ($event) { addTasks(); });
      __t.addAll([new autogenerated.Text('\n            '),
          __e43,
          new autogenerated.Text('\n          ')]);
      });

    __t.addAll([new autogenerated.Text('\n          '),
        __e42,
        new autogenerated.Text('\n          '),
        __e44,
        new autogenerated.Text('\n        ')]);
    });

    __e46 = __root.nodes[5];
    __t.conditional(__e46, () => !(tasks.length > 0), (__t) {
    __t.addAll([new autogenerated.Text('\n          '),
        __html19.clone(true),
        new autogenerated.Text('\n        ')]);
    });

    __t.create();
  }

  void inserted_autogenerated() {
    __t.insert();
  }

  void removed_autogenerated() {
    __t.remove();
    __t = __e11 = __e45 = __e46 = null;
  }

  /** Original code from the component. */

  static const int limit = 10;
  
  int taskCount = 0;
  String filter = '';
  int userId = 0;
  int selectedTaskTypeFilter = 0;
  int selectedSourceFilter = 0;
  int selectedTargetFilter = 0;
  String __$taskOneColour;
  String get taskOneColour {
    if (__observe.observeReads) {
      __observe.notifyRead(this, __observe.ChangeRecord.FIELD, 'taskOneColour');
    }
    return __$taskOneColour;
  }
  set taskOneColour(String value) {
    if (__observe.hasObservers(this)) {
      __observe.notifyChange(this, __observe.ChangeRecord.FIELD, 'taskOneColour',
          __$taskOneColour, value);
    }
    __$taskOneColour = value;
  }
  String __$taskTwoColour;
  String get taskTwoColour {
    if (__observe.observeReads) {
      __observe.notifyRead(this, __observe.ChangeRecord.FIELD, 'taskTwoColour');
    }
    return __$taskTwoColour;
  }
  set taskTwoColour(String value) {
    if (__observe.hasObservers(this)) {
      __observe.notifyChange(this, __observe.ChangeRecord.FIELD, 'taskTwoColour',
          __$taskTwoColour, value);
    }
    __$taskTwoColour = value;
  }
  String __$taskThreeColour;
  String get taskThreeColour {
    if (__observe.observeReads) {
      __observe.notifyRead(this, __observe.ChangeRecord.FIELD, 'taskThreeColour');
    }
    return __$taskThreeColour;
  }
  set taskThreeColour(String value) {
    if (__observe.hasObservers(this)) {
      __observe.notifyChange(this, __observe.ChangeRecord.FIELD, 'taskThreeColour',
          __$taskThreeColour, value);
    }
    __$taskThreeColour = value;
  }
  String __$taskFourColour;
  String get taskFourColour {
    if (__observe.observeReads) {
      __observe.notifyRead(this, __observe.ChangeRecord.FIELD, 'taskFourColour');
    }
    return __$taskFourColour;
  }
  set taskFourColour(String value) {
    if (__observe.hasObservers(this)) {
      __observe.notifyChange(this, __observe.ChangeRecord.FIELD, 'taskFourColour',
          __$taskFourColour, value);
    }
    __$taskFourColour = value;
  }
  bool __$moreTasks = true;
  bool get moreTasks {
    if (__observe.observeReads) {
      __observe.notifyRead(this, __observe.ChangeRecord.FIELD, 'moreTasks');
    }
    return __$moreTasks;
  }
  set moreTasks(bool value) {
    if (__observe.hasObservers(this)) {
      __observe.notifyChange(this, __observe.ChangeRecord.FIELD, 'moreTasks',
          __$moreTasks, value);
    }
    __$moreTasks = value;
  }
  List<Task> __$tasks;
  List<Task> get tasks {
    if (__observe.observeReads) {
      __observe.notifyRead(this, __observe.ChangeRecord.FIELD, 'tasks');
    }
    return __$tasks;
  }
  set tasks(List<Task> value) {
    if (__observe.hasObservers(this)) {
      __observe.notifyChange(this, __observe.ChangeRecord.FIELD, 'tasks',
          __$tasks, value);
    }
    __$tasks = value;
  }
  Map<int, Project> __$projectMap;
  Map<int, Project> get projectMap {
    if (__observe.observeReads) {
      __observe.notifyRead(this, __observe.ChangeRecord.FIELD, 'projectMap');
    }
    return __$projectMap;
  }
  set projectMap(Map<int, Project> value) {
    if (__observe.hasObservers(this)) {
      __observe.notifyChange(this, __observe.ChangeRecord.FIELD, 'projectMap',
          __$projectMap, value);
    }
    __$projectMap = value;
  }
  Map<int, Organisation> __$orgMap;
  Map<int, Organisation> get orgMap {
    if (__observe.observeReads) {
      __observe.notifyRead(this, __observe.ChangeRecord.FIELD, 'orgMap');
    }
    return __$orgMap;
  }
  set orgMap(Map<int, Organisation> value) {
    if (__observe.hasObservers(this)) {
      __observe.notifyChange(this, __observe.ChangeRecord.FIELD, 'orgMap',
          __$orgMap, value);
    }
    __$orgMap = value;
  }
  List<Language> __$activeLanguages;
  List<Language> get activeLanguages {
    if (__observe.observeReads) {
      __observe.notifyRead(this, __observe.ChangeRecord.FIELD, 'activeLanguages');
    }
    return __$activeLanguages;
  }
  set activeLanguages(List<Language> value) {
    if (__observe.hasObservers(this)) {
      __observe.notifyChange(this, __observe.ChangeRecord.FIELD, 'activeLanguages',
          __$activeLanguages, value);
    }
    __$activeLanguages = value;
  }
  Map<int, String> __$taskTypes;
  Map<int, String> get taskTypes {
    if (__observe.observeReads) {
      __observe.notifyRead(this, __observe.ChangeRecord.FIELD, 'taskTypes');
    }
    return __$taskTypes;
  }
  set taskTypes(Map<int, String> value) {
    if (__observe.hasObservers(this)) {
      __observe.notifyChange(this, __observe.ChangeRecord.FIELD, 'taskTypes',
          __$taskTypes, value);
    }
    __$taskTypes = value;
  }
  List<int> __$taskTypeIndexes;
  List<int> get taskTypeIndexes {
    if (__observe.observeReads) {
      __observe.notifyRead(this, __observe.ChangeRecord.FIELD, 'taskTypeIndexes');
    }
    return __$taskTypeIndexes;
  }
  set taskTypeIndexes(List<int> value) {
    if (__observe.hasObservers(this)) {
      __observe.notifyChange(this, __observe.ChangeRecord.FIELD, 'taskTypeIndexes',
          __$taskTypeIndexes, value);
    }
    __$taskTypeIndexes = value;
  }
  
  TaskStream()
  {
    tasks = toObservable(new List<Task>());
    projectMap = toObservable(new Map<int, Project>());    
    orgMap = toObservable(new Map<int, Organisation>());
    activeLanguages = toObservable(new List<Language>());
    taskTypes = toObservable(new Map<int, String>());
    taskTypeIndexes = toObservable(new List<int>());
  }
  
  void inserted()
  {
    Settings settings = new Settings();
    settings.loadConf().then((e) {
      loadActiveLanguages();
      addTasks();
      taskTypeIndexes.add(0);
      taskTypes[0] = "Any";
      taskTypeIndexes.add(1);
      taskTypes[1] = "Segmentation";
      taskOneColour = settings.conf.task_colours.colour_1;
      print("Task 1 colour: $taskOneColour");
      taskTypeIndexes.add(2);
      taskTypes[2] = "Translation";
      taskTwoColour = settings.conf.task_colours.colour_2;
      taskTypeIndexes.add(3);
      taskTypes[3] = "Proofreading";
      taskThreeColour = settings.conf.task_colours.colour_3;
      taskTypeIndexes.add(4);
      taskTypes[4] = "Desegmentation";
      taskFourColour = settings.conf.task_colours.colour_4;
    });
  }
  
  void loadActiveLanguages()
  {
    Language any = new Language();
    any.name = "Any";
    any.code = "";
    activeLanguages.add(any);
    LanguageDao.getActiveLanguages().then((List<Language> langs) {
      langs.forEach((Language lang) {
        activeLanguages.add(lang);
      });
    });
  }
  
  void addTasks()
  {
    int offset = taskCount;
    if (userId > 0) {
      TaskDao.getUserTopTasks(userId, offset, limit, filter)
              .then((List<Task> userTasks) => processTaskList(userTasks));
    } else {
      TaskDao.getLatestAvailableTasks(offset, limit)
              .then((List<Task> tasks) => processTaskList(tasks));
    }
  }
  
  void processTaskList(List<Task> tasks)
  {
    if (tasks.length > 0) {
      if (tasks.length < limit) {
        moreTasks = false;
      }
      if (tasks.length > 0) {
        tasks.forEach((Task task) {
          addTask(task);
        });
      }
    } else {
      moreTasks = false;
      print("No tasks found for user " + userId.toString());
    }
  }
  
  void addTask(Task task)
  {
    tasks.add(task);
    taskCount++;
    if (!projectMap.containsKey(task.projectId)) {
      ProjectDao.getProject(task.projectId).then((Project proj) {
        projectMap[proj.id] = proj;
        OrgDao.getOrg(proj.organisationId).then((Organisation org) {
          orgMap[org.id] = org;
        });
      });
    }
  }
  
  void filterStream()
  {
    filter = "";
    if (selectedTaskTypeFilter > 0) {
      filter += "taskType:" + selectedTaskTypeFilter.toString() + ";";                
    }
    if (selectedSourceFilter > 0) {
      filter += "sourceLanguage:" + activeLanguages.elementAt(selectedSourceFilter).code + ";";
    }
    if (selectedTargetFilter > 0) {
      filter += "targetLanguage:" + activeLanguages.elementAt(selectedTargetFilter).code + ";";
    }
    tasks.clear();
    taskCount = 0;
    moreTasks = true;
    TaskDao.getUserTopTasks(userId, taskCount, limit, filter)
            .then((List<Task> userTasks) => processTaskList(userTasks));
  }
}
//# sourceMappingURL=TaskStream.dart.map
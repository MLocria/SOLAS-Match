// Auto-generated from ProjectCreateForm.html.
// DO NOT EDIT.

library SolasMatchDart;

import 'dart:html' as autogenerated;
import 'dart:svg' as autogenerated_svg;
import 'package:web_ui/web_ui.dart' as autogenerated;
import 'package:web_ui/observe/observable.dart' as __observe;
import "package:web_ui/web_ui.dart";
import "dart:async";
import "dart:html";
import 'package:js/js.dart' as js;
import "dart:json" as json;
import '../../DataAccessObjects/TaskDao.dart';
import '../../DataAccessObjects/ProjectDao.dart';
import '../../DataAccessObjects/LanguageDao.dart';
import '../../DataAccessObjects/CountryDao.dart';
import '../../lib/models/Task.dart';
import '../../lib/models/Tag.dart';
import '../../lib/models/Project.dart';
import '../../lib/models/Org.dart';
import '../../lib/models/Language.dart';
import '../../lib/models/Locale.dart';
import '../../lib/models/Country.dart';
import '../../lib/Settings.dart';
import '../../lib/Localisation.dart';
import '../../lib/TaskTypeEnum.dart';
import '../../lib/TaskStatusEnum.dart';



class ProjectCreateForm extends WebComponent with Observable 
{
  /** Autogenerated from the template. */

  autogenerated.ScopedCssMapper _css;

  /** This field is deprecated, use getShadowRoot instead. */
  get _root => getShadowRoot("x-project-create-form");
  static final __html1 = new autogenerated.Element.html('<tr template="" instantiate="if isError()">\n              <td colspan="2">\n                <div class="alert alert-error">\n                  <h3></h3>\n                  <ol>\n                    <li style="display:none"></li>\n                    <li style="display:none"></li>\n                    <li style="display:none"></li>\n                    <li style="display:none"></li>\n                    <li style="display:none"></li>\n                    <li style="display:none"></li>\n                    <li style="display:none"></li>\n                    <li style="display:none"></li>\n                  </ol>\n                </div>\n              </td>\n            </tr>'), __html10 = new autogenerated.Element.tag('strong'), __html11 = new autogenerated.Element.html('<span style="color: red">*</span>'), __html12 = new autogenerated.Element.html('<span style="color: red">*</span>'), __html13 = new autogenerated.Element.html('<span style="color: red">*</span>'), __html14 = new autogenerated.BRElement(), __html15 = new autogenerated.Element.html('<span style="color: red">*</span>'), __html16 = new autogenerated.Element.tag('strong'), __html17 = new autogenerated.Element.html('<span style="color: red">*</span>'), __html18 = new autogenerated.Element.html('<a href="http://wordcounttool.net/" target="_blank">Word Count Tool</a>'), __html19 = new autogenerated.Element.html('<span style="color: red">*</span>'), __html2 = new autogenerated.Element.html('<li template="" instantiate="if titleError != null"></li>'), __html20 = new autogenerated.BRElement(), __html21 = new autogenerated.Element.html('<strong>spaces</strong>'), __html22 = new autogenerated.Element.html('<div template="" instantiate="if !loaded">\n                  <p></p>\n                </div>'), __html23 = new autogenerated.Element.html('<td align="left" valign="top" template="" instantiate="if !loaded">\n                <p></p>\n              </td>'), __html24 = new autogenerated.Element.html('<span style="color: red">*</span>'), __html25 = new autogenerated.Element.html('<span style="color: red">*</span>'), __html26 = new autogenerated.Element.html('<div class="alert alert-info" style="text-align: center" template="" instantiate="if maxTargetsReached != null"></div>'), __html27 = new autogenerated.Element.html('<i class="icon-upload icon-white"></i>'), __html28 = new autogenerated.Element.html('<i class="icon-fire icon-white"></i>'), __html29 = new autogenerated.Element.html('<tr template="" instantiate="if createProjectError != null">\n              <td colspan="2" class="alert alert-error"></td>\n            </tr>'), __html3 = new autogenerated.Element.html('<li template="" instantiate="if descriptionError != null"></li>'), __html30 = new autogenerated.Element.html('<i class="icon-ban-circle icon-white"></i>'), __html31 = new autogenerated.Element.html('<i class="icon-upload icon-white"></i>'), __html4 = new autogenerated.Element.html('<li template="" instantiate="if wordCountError != null"></li>'), __html5 = new autogenerated.Element.html('<li template="" instantiate="if deadlineError != null"></li>'), __html6 = new autogenerated.Element.html('<li template="" instantiate="if impactError != null"></li>'), __html7 = new autogenerated.Element.html('<li template="" instantiate="if targetLanguageError != null"></li>'), __html8 = new autogenerated.Element.html('<li template="" instantiate="if uniqueLanguageCountryError != null"></li>'), __html9 = new autogenerated.Element.html('<li template="" instantiate="if fileUploadError != null"></li>'), __shadowTemplate = new autogenerated.DocumentFragment.html('''
        <table>
          <tbody>
            <tr style="display:none"></tr>
            <tr valign="middle">
              <td width="493" align="center" valign="middle">
                <label><h2></h2></label>
                <p class="desc"></p>
                <textarea wrap="soft" cols="1" rows="3" style="width: 400px"></textarea>
                <p style="margin-bottom:40px;"></p>
 
                <label for="description">
                  <h2></h2>
                </label>
                <p class="desc"></p>
                <textarea wrap="soft" cols="1" rows="8" style="width: 400px"></textarea>
                <p style="margin-bottom:37.5px;"></p>
 
                <label for="impact">
                  <h2></h2>
                </label>
                <p class="desc"></p>
                <textarea wrap="soft" cols="1" rows="3" style="width: 400px"></textarea>
                <p style="margin-bottom:37.5px;"></p>
 
                <label for="reference"><h2></h2></label>
                <p class="desc"></p>
                <input type="text" style="width: 400px">
              </td>
              <td width="493" align="center" valign="middle">
                <div style="margin-bottom:25px;">
                  <label>
                    <h2></h2>
                  </label>
                  <p class="desc"></p>
                  <input type="file" id="projectFile">
                </div>
                <div style="margin-bottom: 25px;">
                  <label for="word_count">
                    <h2></h2>
                  </label>
                  <p class="desc"></p>
                  <input type="text" maxlength="6" style="width: 400px">
                </div>
                <div style="margin-bottom:25px;">
                  <label>
                    <h2></h2>
                  </label>
                  <p class="desc"></p>
                  <input class="hasDatePicker" type="text" id="deadline" name="deadline" style="width: 400px">
                </div>
                <div style="margin-bottom:25px;">
                  <label for="tags"><h2></h2></label>
                  <p class="desc"></p>
                  <input style="width: 400px">
                </div>
                <div style="margin-bottom:25px;">
                  <label for="publishtasks">
                    <h2></h2>
                  </label>
                  <p class="desc"></p>
                  <input type="checkbox">
                </div>
                <div style="margin-bottom:25px;">
                  <label for="trackProject">
                    <h2></h2>
                  </label>
                  <p class="desc"></p>
                  <input type="checkbox">
                </div>
              </td>
            </tr>
            <tr>
              <td colspan="2">
                <hr>
              </td>
            </tr>
            <tr>
              <td align="left" valign="top">
                <div style="display:none"></div>
                <div id="sourceLanguageDiv"></div>
              </td>
              <td style="display:none"></td>
              <td align="center" valign="middle">
                <h2></h2>
                <p class="desc"></p>
              </td>
            </tr>
            <tr id="targetLanguageTitle">
              <td>
                <h2></h2>
                <br>
              </td>
              <td valign="center">
                <table border="0" width="100%">
                  <tbody><tr align="center">
                    <td width="33%"><strong></strong></td>
                    <td width="33%"><strong></strong></td>
                    <td width="33%"><strong></strong></td>
                  </tr>
                </tbody></table>
              </td>
            </tr>
            <tr id="horizontalLine_0">
              <td colspan="2"><hr></td>
            </tr>
            <tr>
              <td colspan="2">
                <div style="display:none"></div> 
                <button id="addMoreTargetsBtn" class="btn btn-success" type="button"></button>
                <button id="removeBottomTargetBtn" class="btn btn-inverse" type="button"></button>
              </td>
            </tr>
            <tr>
              <td colspan="2">
                <hr>
              </td>
            </tr>
            <tr style="display:none"></tr>
            <tr align="center">
              <td>
                <p style="margin-bottom:20px;"></p>
                  <a class="btn btn-danger"></a>
                <p style="margin-bottom:20px;"></p>
              </td>
              <td>
                <p style="margin-bottom:20px;"></p>
                <button class="btn btn-success"></button>
                <p style="margin-bottom:20px;"></p>
              </td>
            </tr>
          </tbody>
        </table>
      ''');
  autogenerated.AnchorElement __e116;
  autogenerated.ButtonElement __e108, __e110, __e118;
  autogenerated.DivElement __e106, __e87;
  autogenerated.Element __e101, __e103, __e56, __e99;
  autogenerated.HeadingElement __e31, __e36, __e41, __e47, __e52, __e59, __e64, __e68, __e75, __e80, __e93, __e97;
  autogenerated.InputElement __e50, __e62, __e73, __e78, __e83;
  autogenerated.ParagraphElement __e33, __e38, __e44, __e49, __e57, __e61, __e66, __e72, __e77, __e82, __e95;
  autogenerated.TableCellElement __e91;
  autogenerated.TableRowElement __e114, __e29;
  autogenerated.Template __t;
  autogenerated.TextAreaElement __e34, __e39, __e45;

  void created_autogenerated() {
    var __root = createShadowRoot("x-project-create-form");
    setScopedCss("x-project-create-form", new autogenerated.ScopedCssMapper({"x-project-create-form":"[is=\"x-project-create-form\"]"}));
    _css = getScopedCss("x-project-create-form");
    __t = new autogenerated.Template(__root);
    __root.nodes.add(__shadowTemplate.clone(true));
    __e29 = __root.nodes[1].nodes[1].nodes[1];
    __t.conditional(__e29, () => isError(), (__t) {
      var __e1, __e10, __e13, __e16, __e19, __e22, __e27, __e28, __e4, __e7;
      __e28 = __html1.clone(true);
      __e1 = __e28.nodes[1].nodes[1].nodes[1];
      var __binding0 = __t.contentBind(() => Localisation.getTranslationSafe("common_please_fill_in_all_required_fields"), false);
      __e1.nodes.addAll([__binding0,
          new autogenerated.Text(':')]);
      __e4 = __e28.nodes[1].nodes[1].nodes[3].nodes[1];
      __t.conditional(__e4, () => titleError != null, (__t) {
        var __e3;
        __e3 = __html2.clone(true);
        var __binding2 = __t.contentBind(() => titleError, false);
        __e3.nodes.add(__binding2);
      __t.add(__e3);
      });

      __e7 = __e28.nodes[1].nodes[1].nodes[3].nodes[3];
      __t.conditional(__e7, () => descriptionError != null, (__t) {
        var __e6;
        __e6 = __html3.clone(true);
        var __binding5 = __t.contentBind(() => descriptionError, false);
        __e6.nodes.add(__binding5);
      __t.add(__e6);
      });

      __e10 = __e28.nodes[1].nodes[1].nodes[3].nodes[5];
      __t.conditional(__e10, () => wordCountError != null, (__t) {
        var __e9;
        __e9 = __html4.clone(true);
        var __binding8 = __t.contentBind(() => wordCountError, false);
        __e9.nodes.add(__binding8);
      __t.add(__e9);
      });

      __e13 = __e28.nodes[1].nodes[1].nodes[3].nodes[7];
      __t.conditional(__e13, () => deadlineError != null, (__t) {
        var __e12;
        __e12 = __html5.clone(true);
        var __binding11 = __t.contentBind(() => deadlineError, false);
        __e12.nodes.add(__binding11);
      __t.add(__e12);
      });

      __e16 = __e28.nodes[1].nodes[1].nodes[3].nodes[9];
      __t.conditional(__e16, () => impactError != null, (__t) {
        var __e15;
        __e15 = __html6.clone(true);
        var __binding14 = __t.contentBind(() => impactError, false);
        __e15.nodes.add(__binding14);
      __t.add(__e15);
      });

      __e19 = __e28.nodes[1].nodes[1].nodes[3].nodes[11];
      __t.conditional(__e19, () => targetLanguageError != null, (__t) {
        var __e18;
        __e18 = __html7.clone(true);
        var __binding17 = __t.contentBind(() => targetLanguageError, false);
        __e18.nodes.add(__binding17);
      __t.add(__e18);
      });

      __e22 = __e28.nodes[1].nodes[1].nodes[3].nodes[13];
      __t.conditional(__e22, () => uniqueLanguageCountryError != null, (__t) {
        var __e21;
        __e21 = __html8.clone(true);
        var __binding20 = __t.contentBind(() => uniqueLanguageCountryError, false);
        __e21.nodes.addAll([new autogenerated.Text('\n                      '),
            __binding20,
            new autogenerated.Text('\n                    ')]);
      __t.add(__e21);
      });

      __e27 = __e28.nodes[1].nodes[1].nodes[3].nodes[15];
      __t.conditional(__e27, () => fileUploadError != null, (__t) {
        var __e24, __e26;
        __e26 = __html9.clone(true);
        __e24 = __html10.clone(true);
        var __binding23 = __t.contentBind(() => Localisation.getTranslationSafe("project_create_source_text"), false);
        __e24.nodes.add(__binding23);
        var __binding25 = __t.contentBind(() => fileUploadError, false);
        __e26.nodes.addAll([new autogenerated.Text('\n                      '),
            __e24,
            new autogenerated.Text('\n                      - '),
            __binding25,
            new autogenerated.Text('\n                    ')]);
      __t.add(__e26);
      });

    __t.add(__e28);
    });

    __e31 = __root.nodes[1].nodes[1].nodes[3].nodes[1].nodes[1].nodes[0];
    var __binding30 = __t.contentBind(() => Localisation.getTranslationSafe("common_title"), false);
    __e31.nodes.addAll([__binding30,
        new autogenerated.Text(': '),
        __html11.clone(true)]);
    __e33 = __root.nodes[1].nodes[1].nodes[3].nodes[1].nodes[3];
    var __binding32 = __t.contentBind(() => Localisation.getTranslationSafe("project_create_1"), false);
    __e33.nodes.addAll([__binding32,
        new autogenerated.Text('.')]);
    __e34 = __root.nodes[1].nodes[1].nodes[3].nodes[1].nodes[5];
    __t.listen(__e34.onInput, ($event) { project.title = __e34.value; });
    __t.oneWayBind(() => project.title, (e) { if (__e34.value != e) __e34.value = e; }, false, false);
    __e36 = __root.nodes[1].nodes[1].nodes[3].nodes[1].nodes[9].nodes[1];
    var __binding35 = __t.contentBind(() => Localisation.getTranslationSafe("common_description"), false);
    __e36.nodes.addAll([__binding35,
        new autogenerated.Text(': '),
        __html12.clone(true)]);
    __e38 = __root.nodes[1].nodes[1].nodes[3].nodes[1].nodes[11];
    var __binding37 = __t.contentBind(() => Localisation.getTranslationSafe("project_create_2"), false);
    __e38.nodes.addAll([__binding37,
        new autogenerated.Text('.')]);
    __e39 = __root.nodes[1].nodes[1].nodes[3].nodes[1].nodes[13];
    __t.listen(__e39.onInput, ($event) { project.description = __e39.value; });
    __t.oneWayBind(() => project.description, (e) { if (__e39.value != e) __e39.value = e; }, false, false);
    __e41 = __root.nodes[1].nodes[1].nodes[3].nodes[1].nodes[17].nodes[1];
    var __binding40 = __t.contentBind(() => Localisation.getTranslationSafe("common_impact"), false);
    __e41.nodes.addAll([__binding40,
        new autogenerated.Text(': '),
        __html13.clone(true)]);
    __e44 = __root.nodes[1].nodes[1].nodes[3].nodes[1].nodes[19];
    var __binding42 = __t.contentBind(() => Localisation.getTranslationSafe("project_create_3"), false);
    var __binding43 = __t.contentBind(() => Localisation.getTranslationSafe("project_create_4"), false);
    __e44.nodes.addAll([new autogenerated.Text('\n                  '),
        __binding42,
        new autogenerated.Text('.'),
        __html14.clone(true),
        new autogenerated.Text(' '),
        __binding43,
        new autogenerated.Text('.\n                ')]);
    __e45 = __root.nodes[1].nodes[1].nodes[3].nodes[1].nodes[21];
    __t.listen(__e45.onInput, ($event) { project.impact = __e45.value; });
    __t.oneWayBind(() => project.impact, (e) { if (__e45.value != e) __e45.value = e; }, false, false);
    __e47 = __root.nodes[1].nodes[1].nodes[3].nodes[1].nodes[25].nodes[0];
    var __binding46 = __t.contentBind(() => Localisation.getTranslationSafe("common_reference"), false);
    __e47.nodes.addAll([__binding46,
        new autogenerated.Text(':')]);
    __e49 = __root.nodes[1].nodes[1].nodes[3].nodes[1].nodes[27];
    var __binding48 = __t.contentBind(() => Localisation.getTranslationSafe("project_create_5"), false);
    __e49.nodes.addAll([__binding48,
        new autogenerated.Text('.')]);
    __e50 = __root.nodes[1].nodes[1].nodes[3].nodes[1].nodes[29];
    __t.listen(__e50.onInput, ($event) { project.reference = __e50.value; });
    __t.oneWayBind(() => project.reference, (e) { if (__e50.value != e) __e50.value = e; }, false, false);
    __e52 = __root.nodes[1].nodes[1].nodes[3].nodes[3].nodes[1].nodes[1].nodes[1];
    var __binding51 = __t.contentBind(() => Localisation.getTranslationSafe("project_create_source_text"), false);
    __e52.nodes.addAll([__binding51,
        new autogenerated.Text(': '),
        __html15.clone(true)]);
    __e57 = __root.nodes[1].nodes[1].nodes[3].nodes[3].nodes[1].nodes[3];
    var __binding53 = __t.contentBind(() => Localisation.getTranslationSafe("project_create_6"), false);
    var __binding54 = __t.contentBind(() => Localisation.getTranslationSafe("common_maximum_file_size_is"), false);
    __e56 = __html16.clone(true);
    var __binding55 = __t.contentBind(() => maxFileSize / 1024 / 1024, false);
    __e56.nodes.addAll([__binding55,
        new autogenerated.Text('MB')]);
    __e57.nodes.addAll([new autogenerated.Text('\n                    '),
        __binding53,
        new autogenerated.Text('.\n                    '),
        __binding54,
        new autogenerated.Text('\n                    '),
        __e56,
        new autogenerated.Text('.\n                  ')]);
    __e59 = __root.nodes[1].nodes[1].nodes[3].nodes[3].nodes[3].nodes[1].nodes[1];
    var __binding58 = __t.contentBind(() => Localisation.getTranslationSafe("common_word_count"), false);
    __e59.nodes.addAll([__binding58,
        new autogenerated.Text(': '),
        __html17.clone(true)]);
    __e61 = __root.nodes[1].nodes[1].nodes[3].nodes[3].nodes[3].nodes[3];
    var __binding60 = __t.contentBind(() => Localisation.getTranslationSafe("common_approximate_or_use_a_website_such_as"), false);
    __e61.nodes.addAll([__binding60,
        new autogenerated.Text('\n                    '),
        __html18.clone(true),
        new autogenerated.Text('.\n                  ')]);
    __e62 = __root.nodes[1].nodes[1].nodes[3].nodes[3].nodes[3].nodes[5];
    __t.listen(__e62.onInput, ($event) { wordCountInput = __e62.value; });
    __t.oneWayBind(() => wordCountInput, (e) { if (__e62.value != e) __e62.value = e; }, false, false);
    __e64 = __root.nodes[1].nodes[1].nodes[3].nodes[3].nodes[5].nodes[1].nodes[1];
    var __binding63 = __t.contentBind(() => Localisation.getTranslationSafe("common_deadline"), false);
    __e64.nodes.addAll([__binding63,
        new autogenerated.Text(': '),
        __html19.clone(true)]);
    __e66 = __root.nodes[1].nodes[1].nodes[3].nodes[3].nodes[5].nodes[3];
    var __binding65 = __t.contentBind(() => Localisation.getTranslationSafe("project_create_7"), false);
    __e66.nodes.addAll([__binding65,
        new autogenerated.Text('.')]);
    __e68 = __root.nodes[1].nodes[1].nodes[3].nodes[3].nodes[7].nodes[1].nodes[0];
    var __binding67 = __t.contentBind(() => Localisation.getTranslationSafe("common_tags"), false);
    __e68.nodes.addAll([__binding67,
        new autogenerated.Text(':')]);
    __e72 = __root.nodes[1].nodes[1].nodes[3].nodes[3].nodes[7].nodes[3];
    var __binding69 = __t.contentBind(() => Localisation.getTranslationSafe("project_create_8"), false);
    var __binding70 = __t.contentBind(() => Localisation.getTranslationSafe("project_create_separated_by"), false);
    var __binding71 = __t.contentBind(() => Localisation.getTranslationSafe("project_create_for_multiword_tags_joinwithhyphens"), false);
    __e72.nodes.addAll([new autogenerated.Text('\n                    '),
        __binding69,
        new autogenerated.Text('.\n                    '),
        __html20.clone(true),
        new autogenerated.Text('\n                    '),
        __binding70,
        new autogenerated.Text(' '),
        __html21.clone(true),
        new autogenerated.Text('. \n                    '),
        __binding71,
        new autogenerated.Text('.\n                  ')]);
    __e73 = __root.nodes[1].nodes[1].nodes[3].nodes[3].nodes[7].nodes[5];
    __t.listen(__e73.onInput, ($event) { tagList = __e73.value; });
    __t.oneWayBind(() => tagList, (e) { if (__e73.value != e) __e73.value = e; }, false, false);
    __e75 = __root.nodes[1].nodes[1].nodes[3].nodes[3].nodes[9].nodes[1].nodes[1];
    var __binding74 = __t.contentBind(() => Localisation.getTranslationSafe("project_create_publish_tasks"), false);
    __e75.nodes.addAll([__binding74,
        new autogenerated.Text(':')]);
    __e77 = __root.nodes[1].nodes[1].nodes[3].nodes[3].nodes[9].nodes[3];
    var __binding76 = __t.contentBind(() => Localisation.getTranslationSafe("common_if_checked_tasks_will_appear_in_the_tasks_stream"), false);
    __e77.nodes.addAll([new autogenerated.Text('\n                    '),
        __binding76,
        new autogenerated.Text('.\n                  ')]);
    __e78 = __root.nodes[1].nodes[1].nodes[3].nodes[3].nodes[9].nodes[5];
    __t.listen(__e78.onChange, ($event) { publish = __e78.checked; });
    __t.oneWayBind(() => publish, (e) { if (__e78.checked != e) __e78.checked = e; }, false, false);
    __e80 = __root.nodes[1].nodes[1].nodes[3].nodes[3].nodes[11].nodes[1].nodes[1];
    var __binding79 = __t.contentBind(() => Localisation.getTranslationSafe("common_track_project"), false);
    __e80.nodes.addAll([__binding79,
        new autogenerated.Text(':')]);
    __e82 = __root.nodes[1].nodes[1].nodes[3].nodes[3].nodes[11].nodes[3];
    var __binding81 = __t.contentBind(() => Localisation.getTranslationSafe("project_create_12"), false);
    __e82.nodes.add(__binding81);
    __e83 = __root.nodes[1].nodes[1].nodes[3].nodes[3].nodes[11].nodes[5];
    __t.listen(__e83.onChange, ($event) { trackProject = __e83.checked; });
    __t.oneWayBind(() => trackProject, (e) { if (__e83.checked != e) __e83.checked = e; }, false, false);
    __e87 = __root.nodes[1].nodes[1].nodes[7].nodes[1].nodes[1];
    __t.conditional(__e87, () => !loaded, (__t) {
      var __e85, __e86;
      __e86 = __html22.clone(true);
      __e85 = __e86.nodes[1];
      var __binding84 = __t.contentBind(() => Localisation.getTranslationSafe("common_loading"), false);
      __e85.nodes.add(__binding84);
    __t.add(__e86);
    });

    __e91 = __root.nodes[1].nodes[1].nodes[7].nodes[3];
    __t.conditional(__e91, () => !loaded, (__t) {
      var __e89, __e90;
      __e90 = __html23.clone(true);
      __e89 = __e90.nodes[1];
      var __binding88 = __t.contentBind(() => Localisation.getTranslationSafe("common_loading"), false);
      __e89.nodes.add(__binding88);
    __t.add(__e90);
    });

    __e93 = __root.nodes[1].nodes[1].nodes[7].nodes[5].nodes[1];
    var __binding92 = __t.contentBind(() => Localisation.getTranslationSafe("common_task_type"), false);
    __e93.nodes.addAll([__binding92,
        new autogenerated.Text(': '),
        __html24.clone(true)]);
    __e95 = __root.nodes[1].nodes[1].nodes[7].nodes[5].nodes[3];
    var __binding94 = __t.contentBind(() => Localisation.getTranslationSafe("project_create_9"), false);
    __e95.nodes.addAll([__binding94,
        new autogenerated.Text('.')]);
    __e97 = __root.nodes[1].nodes[1].nodes[9].nodes[1].nodes[1];
    var __binding96 = __t.contentBind(() => Localisation.getTranslationSafe("project_create_target_languages"), false);
    __e97.nodes.addAll([__binding96,
        new autogenerated.Text(': '),
        __html25.clone(true)]);
    __e99 = __root.nodes[1].nodes[1].nodes[9].nodes[3].nodes[1].nodes[1].nodes[0].nodes[1].nodes[0];
    var __binding98 = __t.contentBind(() => Localisation.getTranslationSafe("common_segmentation"), false);
    __e99.nodes.add(__binding98);
    __e101 = __root.nodes[1].nodes[1].nodes[9].nodes[3].nodes[1].nodes[1].nodes[0].nodes[3].nodes[0];
    var __binding100 = __t.contentBind(() => Localisation.getTranslationSafe("common_translation"), false);
    __e101.nodes.add(__binding100);
    __e103 = __root.nodes[1].nodes[1].nodes[9].nodes[3].nodes[1].nodes[1].nodes[0].nodes[5].nodes[0];
    var __binding102 = __t.contentBind(() => Localisation.getTranslationSafe("common_proofreading"), false);
    __e103.nodes.add(__binding102);
    __e106 = __root.nodes[1].nodes[1].nodes[13].nodes[1].nodes[1];
    __t.conditional(__e106, () => maxTargetsReached != null, (__t) {
      var __e105;
      __e105 = __html26.clone(true);
      var __binding104 = __t.contentBind(() => maxTargetsReached, false);
      __e105.nodes.addAll([new autogenerated.Text('\n                  '),
          __binding104,
          new autogenerated.Text('.\n                ')]);
    __t.add(__e105);
    });

    __e108 = __root.nodes[1].nodes[1].nodes[13].nodes[1].nodes[3];
    var __binding107 = __t.contentBind(() => Localisation.getTranslationSafe("project_create_add_more_target_languages"), false);
    __e108.nodes.addAll([new autogenerated.Text('\n                  '),
        __html27.clone(true),
        new autogenerated.Text(' \n                  '),
        __binding107,
        new autogenerated.Text('\n                ')]);
    __t.listen(__e108.onClick, ($event) { addMoreTargetLanguages(); });
    __e110 = __root.nodes[1].nodes[1].nodes[13].nodes[1].nodes[5];
    var __binding109 = __t.contentBind(() => Localisation.getTranslationSafe("common_remove"), false);
    __e110.nodes.addAll([new autogenerated.Text('\n                  '),
        __html28.clone(true),
        new autogenerated.Text(' \n                  '),
        __binding109,
        new autogenerated.Text('\n                ')]);
    __t.listen(__e110.onClick, ($event) { removeTargetLanguage(); });
    __e114 = __root.nodes[1].nodes[1].nodes[17];
    __t.conditional(__e114, () => createProjectError != null, (__t) {
      var __e112, __e113;
      __e113 = __html29.clone(true);
      __e112 = __e113.nodes[1];
      var __binding111 = __t.contentBind(() => createProjectError, false);
      __e112.nodes.addAll([new autogenerated.Text('\n                '),
          __binding111,
          new autogenerated.Text('\n              ')]);
    __t.add(__e113);
    });

    __e116 = __root.nodes[1].nodes[1].nodes[19].nodes[1].nodes[3];
    var __binding115 = __t.contentBind(() => Localisation.getTranslationSafe("common_cancel"), false);
    __e116.nodes.addAll([new autogenerated.Text('\n                    '),
        __html30.clone(true),
        new autogenerated.Text('\n                    '),
        __binding115,
        new autogenerated.Text('\n                  ')]);
    __t.oneWayBind(() => orgDashboardLink, (e) { if (__e116.href != e) __e116.href = e; }, false, true);
    __e118 = __root.nodes[1].nodes[1].nodes[19].nodes[3].nodes[3];
    var __binding117 = __t.contentBind(() => Localisation.getTranslationSafe("common_create_project"), false);
    __e118.nodes.addAll([new autogenerated.Text('\n                  '),
        __html31.clone(true),
        new autogenerated.Text(' '),
        __binding117,
        new autogenerated.Text('\n                ')]);
    __t.listen(__e118.onClick, ($event) { submitForm(); });
    __t.create();
  }

  void inserted_autogenerated() {
    __t.insert();
  }

  void removed_autogenerated() {
    __t.remove();
    __t = __e29 = __e31 = __e33 = __e34 = __e36 = __e38 = __e39 = __e41 = __e44 = __e45 = __e47 = __e49 = __e50 = __e52 = __e57 = __e56 = __e59 = __e61 = __e62 = __e64 = __e66 = __e68 = __e72 = __e73 = __e75 = __e77 = __e78 = __e80 = __e82 = __e83 = __e87 = __e91 = __e93 = __e95 = __e97 = __e99 = __e101 = __e103 = __e106 = __e108 = __e110 = __e114 = __e116 = __e118 = null;
  }

  /** Original code from the component. */

  // Bound Attributes
  int userId;
  int orgId;
  int maxFileSize;
  
  // Other
  int maxTargetLanguages;
  File fileName;
  String tagList;
  String wordCountInput;
  String orgDashboardLink;
  SelectElement langSelect;
  SelectElement countrySelect;
  bool __$publish;
  bool get publish {
    if (__observe.observeReads) {
      __observe.notifyRead(this, __observe.ChangeRecord.FIELD, 'publish');
    }
    return __$publish;
  }
  set publish(bool value) {
    if (__observe.hasObservers(this)) {
      __observe.notifyChange(this, __observe.ChangeRecord.FIELD, 'publish',
          __$publish, value);
    }
    __$publish = value;
  }
  bool __$trackProject;
  bool get trackProject {
    if (__observe.observeReads) {
      __observe.notifyRead(this, __observe.ChangeRecord.FIELD, 'trackProject');
    }
    return __$trackProject;
  }
  set trackProject(bool value) {
    if (__observe.hasObservers(this)) {
      __observe.notifyChange(this, __observe.ChangeRecord.FIELD, 'trackProject',
          __$trackProject, value);
    }
    __$trackProject = value;
  }
  bool __$loaded;
  bool get loaded {
    if (__observe.observeReads) {
      __observe.notifyRead(this, __observe.ChangeRecord.FIELD, 'loaded');
    }
    return __$loaded;
  }
  set loaded(bool value) {
    if (__observe.hasObservers(this)) {
      __observe.notifyChange(this, __observe.ChangeRecord.FIELD, 'loaded',
          __$loaded, value);
    }
    __$loaded = value;
  }
  Project __$project;
  Project get project {
    if (__observe.observeReads) {
      __observe.notifyRead(this, __observe.ChangeRecord.FIELD, 'project');
    }
    return __$project;
  }
  set project(Project value) {
    if (__observe.hasObservers(this)) {
      __observe.notifyChange(this, __observe.ChangeRecord.FIELD, 'project',
          __$project, value);
    }
    __$project = value;
  }
  List<Language> __$languages;
  List<Language> get languages {
    if (__observe.observeReads) {
      __observe.notifyRead(this, __observe.ChangeRecord.FIELD, 'languages');
    }
    return __$languages;
  }
  set languages(List<Language> value) {
    if (__observe.hasObservers(this)) {
      __observe.notifyChange(this, __observe.ChangeRecord.FIELD, 'languages',
          __$languages, value);
    }
    __$languages = value;
  }
  List<Country> __$countries;
  List<Country> get countries {
    if (__observe.observeReads) {
      __observe.notifyRead(this, __observe.ChangeRecord.FIELD, 'countries');
    }
    return __$countries;
  }
  set countries(List<Country> value) {
    if (__observe.hasObservers(this)) {
      __observe.notifyChange(this, __observe.ChangeRecord.FIELD, 'countries',
          __$countries, value);
    }
    __$countries = value;
  }
  int __$targetCount;
  int get targetCount {
    if (__observe.observeReads) {
      __observe.notifyRead(this, __observe.ChangeRecord.FIELD, 'targetCount');
    }
    return __$targetCount;
  }
  set targetCount(int value) {
    if (__observe.hasObservers(this)) {
      __observe.notifyChange(this, __observe.ChangeRecord.FIELD, 'targetCount',
          __$targetCount, value);
    }
    __$targetCount = value;
  }
  SafeHtml __$maxTargetsReached;
  SafeHtml get maxTargetsReached {
    if (__observe.observeReads) {
      __observe.notifyRead(this, __observe.ChangeRecord.FIELD, 'maxTargetsReached');
    }
    return __$maxTargetsReached;
  }
  set maxTargetsReached(SafeHtml value) {
    if (__observe.hasObservers(this)) {
      __observe.notifyChange(this, __observe.ChangeRecord.FIELD, 'maxTargetsReached',
          __$maxTargetsReached, value);
    }
    __$maxTargetsReached = value;
  }
  
  // Error Variables
  SafeHtml __$titleError;
  SafeHtml get titleError {
    if (__observe.observeReads) {
      __observe.notifyRead(this, __observe.ChangeRecord.FIELD, 'titleError');
    }
    return __$titleError;
  }
  set titleError(SafeHtml value) {
    if (__observe.hasObservers(this)) {
      __observe.notifyChange(this, __observe.ChangeRecord.FIELD, 'titleError',
          __$titleError, value);
    }
    __$titleError = value;
  }
  SafeHtml __$descriptionError;
  SafeHtml get descriptionError {
    if (__observe.observeReads) {
      __observe.notifyRead(this, __observe.ChangeRecord.FIELD, 'descriptionError');
    }
    return __$descriptionError;
  }
  set descriptionError(SafeHtml value) {
    if (__observe.hasObservers(this)) {
      __observe.notifyChange(this, __observe.ChangeRecord.FIELD, 'descriptionError',
          __$descriptionError, value);
    }
    __$descriptionError = value;
  }
  SafeHtml __$wordCountError;
  SafeHtml get wordCountError {
    if (__observe.observeReads) {
      __observe.notifyRead(this, __observe.ChangeRecord.FIELD, 'wordCountError');
    }
    return __$wordCountError;
  }
  set wordCountError(SafeHtml value) {
    if (__observe.hasObservers(this)) {
      __observe.notifyChange(this, __observe.ChangeRecord.FIELD, 'wordCountError',
          __$wordCountError, value);
    }
    __$wordCountError = value;
  }
  SafeHtml __$deadlineError;
  SafeHtml get deadlineError {
    if (__observe.observeReads) {
      __observe.notifyRead(this, __observe.ChangeRecord.FIELD, 'deadlineError');
    }
    return __$deadlineError;
  }
  set deadlineError(SafeHtml value) {
    if (__observe.hasObservers(this)) {
      __observe.notifyChange(this, __observe.ChangeRecord.FIELD, 'deadlineError',
          __$deadlineError, value);
    }
    __$deadlineError = value;
  }
  SafeHtml __$impactError;
  SafeHtml get impactError {
    if (__observe.observeReads) {
      __observe.notifyRead(this, __observe.ChangeRecord.FIELD, 'impactError');
    }
    return __$impactError;
  }
  set impactError(SafeHtml value) {
    if (__observe.hasObservers(this)) {
      __observe.notifyChange(this, __observe.ChangeRecord.FIELD, 'impactError',
          __$impactError, value);
    }
    __$impactError = value;
  }
  SafeHtml __$targetLanguageError;
  SafeHtml get targetLanguageError {
    if (__observe.observeReads) {
      __observe.notifyRead(this, __observe.ChangeRecord.FIELD, 'targetLanguageError');
    }
    return __$targetLanguageError;
  }
  set targetLanguageError(SafeHtml value) {
    if (__observe.hasObservers(this)) {
      __observe.notifyChange(this, __observe.ChangeRecord.FIELD, 'targetLanguageError',
          __$targetLanguageError, value);
    }
    __$targetLanguageError = value;
  }
  SafeHtml __$uniqueLanguageCountryError;
  SafeHtml get uniqueLanguageCountryError {
    if (__observe.observeReads) {
      __observe.notifyRead(this, __observe.ChangeRecord.FIELD, 'uniqueLanguageCountryError');
    }
    return __$uniqueLanguageCountryError;
  }
  set uniqueLanguageCountryError(SafeHtml value) {
    if (__observe.hasObservers(this)) {
      __observe.notifyChange(this, __observe.ChangeRecord.FIELD, 'uniqueLanguageCountryError',
          __$uniqueLanguageCountryError, value);
    }
    __$uniqueLanguageCountryError = value;
  }
  SafeHtml __$fileUploadError;
  SafeHtml get fileUploadError {
    if (__observe.observeReads) {
      __observe.notifyRead(this, __observe.ChangeRecord.FIELD, 'fileUploadError');
    }
    return __$fileUploadError;
  }
  set fileUploadError(SafeHtml value) {
    if (__observe.hasObservers(this)) {
      __observe.notifyChange(this, __observe.ChangeRecord.FIELD, 'fileUploadError',
          __$fileUploadError, value);
    }
    __$fileUploadError = value;
  }
  SafeHtml __$createProjectError;
  SafeHtml get createProjectError {
    if (__observe.observeReads) {
      __observe.notifyRead(this, __observe.ChangeRecord.FIELD, 'createProjectError');
    }
    return __$createProjectError;
  }
  set createProjectError(SafeHtml value) {
    if (__observe.hasObservers(this)) {
      __observe.notifyChange(this, __observe.ChangeRecord.FIELD, 'createProjectError',
          __$createProjectError, value);
    }
    __$createProjectError = value;
  }
  
  ProjectCreateForm()
  {
    project = new Project();
    project.tag = new List<Tag>();
    languages = toObservable(new List<Language>());
    countries = toObservable(new List<Country>());
    maxFileSize = 0;
    loaded = false;
    publish = true;
    trackProject = true;
    targetCount = 0;
    wordCountInput = '';
    tagList = "";
    maxTargetLanguages = 10;
  }
  
  void inserted()
  {
    List<Future<bool>> loadedList = new List<Future<bool>>();
    
    loadedList.add(LanguageDao.getAllLanguages().then((List<Language> langs) {
      languages.addAll(langs);
      return true;
    }));
    
    loadedList.add(CountryDao.getAllCountries().then((List<Country> regions) {
      countries.addAll(regions);
      return true;
    }));
    
    Future.wait(loadedList).then((List<bool> successList) {
      successList.forEach((bool success) {
        if (!success) {
          print("Failed to load some data");
        }
      });
      constructDynamicElements();
    });
  }
  
  void constructDynamicElements()
  {
    langSelect = new SelectElement();
    langSelect.style.width = "400px";
    for (int i = 0; i < languages.length; i++) {
      var option = new OptionElement()
      ..value = languages[i].code
      ..text = languages[i].name;
      langSelect.children.add(option);
    }
    
    countrySelect = new SelectElement();
    countrySelect.style.width = "400px";
    for (int i = 0; i < countries.length; i++) {
      var option = new OptionElement()
      ..value = countries[i].code
      ..text = countries[i].name;
      countrySelect.children.add(option);
    }
    
    DivElement sourceLanguageDiv = query("#sourceLanguageDiv");
    HeadingElement sourceTitle = new HeadingElement.h2()
    ..innerHtml = Localisation.getTranslation("common_source_language") + 
                            ": <span style=\"color: red\">*</span>";
    SelectElement sourceLanguageSelect = langSelect.clone(true);
    sourceLanguageSelect.id = "sourceLanguageSelect";
    SelectElement sourceCountrySelect = countrySelect.clone(true);
    sourceCountrySelect.id = "sourceCountrySelect";
    sourceLanguageDiv.children.add(sourceTitle);
    sourceLanguageDiv.children.add(sourceLanguageSelect);
    sourceLanguageDiv.children.add(sourceCountrySelect);
    
    addMoreTargetLanguages();
    js.context.initDeadlinePicker();
    loaded = true;
  }
  
  void addMoreTargetLanguages()
  {
    if (targetCount < maxTargetLanguages) {
      TableRowElement targetLanguageRow = new TableRowElement()
      ..id = "target_row_$targetCount";
      TableCellElement targetLanguageCell = new TableCellElement();
      SelectElement targetLanguageSelect = langSelect.clone(true);
      targetLanguageSelect.style.width = "400px";
      targetLanguageSelect.id = "target_language_$targetCount";
      SelectElement targetCountrySelect = countrySelect.clone(true);
      targetCountrySelect.style.width = "400px";
      targetCountrySelect.id = "target_country_$targetCount";
      TableCellElement targetTaskTypes = new TableCellElement()
      ..attributes["valign"] = "middle";
      TableElement targetTaskTypesTable = new TableElement();
      TableRowElement taskTypesRow = new TableRowElement()
      ..attributes["align"] = "center";
      TableCellElement segmentationRequired = new TableCellElement()
      ..attributes["valign"] = "middle";
      InputElement segmentationCheckbox = new InputElement(type: "checkbox")
      ..title = Localisation.getTranslation("project_create_10")
      ..id = "segmentation_$targetCount"
      ..onClick.listen((event) => segmentationClicked(event.target));
      TableCellElement translationRequired = new TableCellElement()
      ..attributes["valign"] = "middle";
      InputElement translationCheckbox = new InputElement(type: "checkbox")
      ..title = Localisation.getTranslation("common_create_a_translation_task_for_volunteer_translators_to_pick_up")
      ..id = "translation_$targetCount"
      ..checked = true;
      TableCellElement proofreadingRequired = new TableCellElement()
      ..attributes["valign"] = "middle";
      InputElement proofreadingCheckbox = new InputElement(type: "checkbox")
      ..title = Localisation.getTranslation("common_create_a_proofreading_task_for_evaluating_the_translation_provided_by_a_volunteer")
      ..id = "proofreading_$targetCount"
      ..checked = true;
      
      targetLanguageCell.children.add(targetLanguageSelect);
      targetLanguageCell.children.add(targetCountrySelect);
      targetLanguageRow.children.add(targetLanguageCell);
      segmentationRequired.children.add(segmentationCheckbox);
      translationRequired.children.add(translationCheckbox);
      proofreadingRequired.children.add(proofreadingCheckbox);
      taskTypesRow.children.add(segmentationRequired);
      taskTypesRow.children.add(translationRequired);
      taskTypesRow.children.add(proofreadingRequired);
      targetTaskTypesTable.children.add(taskTypesRow);
      targetTaskTypes.children.add(targetTaskTypesTable);
      targetLanguageRow.children.add(targetTaskTypes);
      
      TableRowElement hrRow = new TableRowElement()
      ..id = "hr_$targetCount"
      ..innerHtml = "<td colspan=\"2\"><hr /></td>";
      
      if (targetCount > 0) {
        TableRowElement lastTarget = query("#target_row_" + (targetCount - 1).toString());
        lastTarget.insertAdjacentElement("afterEnd", targetLanguageRow);
        lastTarget.insertAdjacentElement("afterEnd", hrRow);
      } else {
        TableRowElement targetTitleRow = query("#targetLanguageTitle");
        targetTitleRow.insertAdjacentElement("afterEnd", targetLanguageRow);
        targetTitleRow.insertAdjacentElement("afterEnd", hrRow);
      }
      
      targetCount++;
      if (targetCount >= maxTargetLanguages) {
        maxTargetsReached = new SafeHtml.unsafe("<span>" + Localisation.getTranslation("project_create_11") + "</span>");
      }
    }
  }
  
  void removeTargetLanguage()
  {
    if (targetCount > 1) {
      targetCount--;
      TableRowElement targetLanguageRow = query("#target_row_$targetCount");
      TableRowElement hrElement = query("#hr_$targetCount");
      targetLanguageRow.remove();
      hrElement.remove();
      maxTargetsReached = null;
    }
  }
  
  void submitForm()
  {
    createProjectError = null;
    titleError = null;
    descriptionError = null;
    wordCountError = null;
    deadlineError = null;
    impactError = null;
    targetLanguageError = null;
    uniqueLanguageCountryError = null;
    fileUploadError = null;
    maxTargetsReached = null;
    
    if (validateInput()) {
      project.organisationId = orgId;
      SelectElement sourceLangSelect = query("#sourceLanguageSelect");
      SelectElement sourceCountrySelect = query("#sourceCountrySelect");
      Language sourceLang = languages[sourceLangSelect.selectedIndex];
      Country sourceCountry = countries[sourceCountrySelect.selectedIndex];
      Locale sourceLocale = new Locale();
      sourceLocale.languageName = sourceLang.name;
      sourceLocale.languageCode = sourceLang.code;
      sourceLocale.countryName = sourceCountry.name;
      sourceLocale.countryCode = sourceCountry.code;
      project.sourceLocale = sourceLocale;
      project.organisationId = orgId;
      
      List<String> projectTags = new List<String>();
      if (tagList.length > 0) {
        projectTags = separateTags(tagList);
      }
      if (projectTags.length > 0) {
        projectTags.forEach((String tagName) {
          Tag tag = new Tag();
          tag.label = tagName;
          project.tag.add(tag);
        });
      }

      ProjectDao.createProject(project).then((Project pro) {
        if (pro == null || pro.id == null || pro.id < 1) {
          createProjectError = new SafeHtml.unsafe("<span>Failed to create project</span>");
        } else {
          project = pro;          
          List<Future<bool>> successList = new List<Future<bool>>();
          successList.add(uploadProjectFile().then((bool fileUploaded) {
            Future<bool> ret;
            if (fileUploaded) {
              ret = createProjectTasks();
            } else {
              ret = new Future.value(false);
            }
            return ret;
          }));
          
          if (trackProject) {
            successList.add(ProjectDao.trackProject(project.id, userId));
          }
          
          Future<bool> success = Future.wait(successList).then((List<bool> successes) {
            bool ret = true;
            successes.forEach((bool created) {
              if (!created) {
                ret = false;
              }
            });
            return ret;
          }).catchError((error) {
            print("An error occurred when evaluating project create success list: " + error.toString());
          });
          
          success.then((bool created) {
            if (!created) {
              print("some data failed, deleting project");
              ProjectDao.deleteProject(project.id);
              project.id = null;
            } else {
              ProjectDao.calculateProjectDeadlines(project.id).then((bool deadlinesCalculated) {
                Settings settings = new Settings();
                window.location.assign(settings.conf.urls.SiteLocation + "project/" 
                    + project.id.toString() + "/view");
              });
            }
          }).catchError((error) {
            print("An error occured: " + error.toString());
          });
        }
      });
    } else {
      print("Invalid form input");
    }
  }
  
  Future<bool> createProjectTasks()
  {
    Future<bool> success;
    List<Language> targetLanguages = new List<Language>();
    List<Country> targetCountries = new List<Country>();
    List<Task> createdTasks = new List<Task>();
    List<Future<bool>> successList = new List<Future<bool>>();
    File projectFile = this.getProjectFile();
    FileReader reader = new FileReader();
    String fileText;
    reader.onLoadEnd.listen((e) {
      fileText = reader.result;
    });
    reader.readAsArrayBuffer(projectFile);
    Task templateTask = new Task();
    templateTask.title = project.title;
    templateTask.projectId = project.id;
    templateTask.deadline = project.deadline;
    templateTask.wordCount = project.wordCount;
    templateTask.sourceLocale = project.sourceLocale;
    templateTask.taskStatus = TaskStatusEnum.PENDING_CLAIM.value;
    if (publish) {
      templateTask.published = true;
    } else {
      templateTask.published = false;
    }
    for (int i = 0; i < targetCount; i++) {
      SelectElement targetLanguageSelect = query("#target_language_$i");
      SelectElement targetCountrySelect = query("#target_country_$i");
      Language targetLang = languages[targetLanguageSelect.selectedIndex];
      Country targetCountry = countries[targetCountrySelect.selectedIndex];
      if (targetLanguages.contains(targetLang) && targetCountries.contains(targetCountry)) {
        createProjectError = Localisation.getTranslationSafe("project_routehandler_17");
        success = new Future.value(false);
      } else {
        Locale targetLocale = new Locale();
        targetLocale.languageName = targetLang.name;
        targetLocale.languageCode = targetLang.code;
        targetLocale.countryName = targetCountry.name;
        targetLocale.countryCode = targetCountry.code;
        templateTask.targetLocale = targetLocale;
        CheckboxInputElement segmentationCheckbox = query("#segmentation_$i");
        bool segmentationRequired = segmentationCheckbox.checked;
        CheckboxInputElement translationCheckbox = query("#translation_$i");
        bool translationRequired = translationCheckbox.checked;
        CheckboxInputElement proofreadingCheckbox = query("#proofreading_$i");
        bool proofreadingRequired = proofreadingCheckbox.checked;
        if (!segmentationRequired && !translationRequired && !proofreadingRequired) {
          createProjectError = Localisation.getTranslationSafe("project_routehandler_18");
          successList.add(new Future.value(false));
        } else if (segmentationRequired) {
          templateTask.taskType = TaskTypeEnum.SEGMENTATION.value;
          successList.add(TaskDao.createTask(templateTask).then((Task segTask) {
            bool ret;
            if (segTask == null || segTask.id == null || segTask.id < 1) {
              createProjectError = Localisation.getTranslationSafe("project_create_13");
              ret = false;
            } else {
              createdTasks.add(segTask);
              TaskDao.saveTaskFile(segTask.id, userId, fileText);
              if (trackProject) {
                TaskDao.trackTask(segTask.id, userId);
              }
              ret = true;
            }
            return ret;
          }));
        } else {
          if (translationRequired) {
            templateTask.taskType = TaskTypeEnum.TRANSLATION.value;
            successList.add(TaskDao.createTask(templateTask).then((Task transTask) {
              Future<bool> ret;
              if (transTask == null || transTask.id == null || transTask.id < 1) {
                createProjectError = Localisation.getTranslationSafe("project_create_14");
                ret = new Future.value(false);
              } else {
                createdTasks.add(transTask);
                TaskDao.saveTaskFile(transTask.id, userId, fileText);
                if (trackProject) {
                  TaskDao.trackTask(transTask.id, userId);
                }
                
                if (proofreadingRequired) {
                  templateTask.taskType = TaskTypeEnum.PROOFREADING.value;
                  templateTask.targetLocale = transTask.targetLocale;
                  ret = new Future.sync(() => TaskDao.createTask(templateTask).then((Task proofTask) {
                    Future<bool> ret;
                    if (proofTask == null || proofTask.id == null || proofTask.id < 1) {
                      createProjectError = Localisation.getTranslationSafe("project_create_15"); 
                      ret = new Future.value(false);
                    } else {
                      createdTasks.add(proofTask);
                      TaskDao.saveTaskFile(proofTask.id, userId, fileText);
                      if (trackProject) {
                        TaskDao.trackTask(proofTask.id, userId);
                      }
                      ret = new Future.sync(() => TaskDao.addTaskPreReq(proofTask.id, transTask.id)); 
                    }
                    return ret;
                  }));
                } else {
                  ret = new Future.value(true);
                }
              }
              return ret;
            }));
          } else if (!translationRequired && proofreadingRequired) {
            templateTask.taskType = TaskTypeEnum.PROOFREADING.value;
            successList.add(TaskDao.createTask(templateTask).then((Task proofTask) {
              bool ret;
              if (proofTask == null || proofTask.id == null || proofTask.id < 1) {
                createProjectError = Localisation.getTranslationSafe("project_create_15");
                ret = false;
              } else {
                createdTasks.add(proofTask);
                TaskDao.saveTaskFile(proofTask.id, userId, fileText);
                if (trackProject) {
                  TaskDao.trackTask(proofTask.id, userId);
                }
                ret = true;
              }
              return ret;
            }));
          }
        }
      }
    }
    
    success = Future.wait(successList).then((List<bool> createdList) {
      bool ret = true;
      createdList.forEach((bool created) {
        if (!created) {
          print("Something failed while creating project tasks");
          ret = false;
        }
      });
      return ret;
    });
    return success;
  }
  
  Future<bool> uploadProjectFile()
  {
    Future<bool> ret;
    File projectFile = this.getProjectFile();
    if (projectFile == null) {
      createProjectError = Localisation.getTranslationSafe("project_create_16");
    }
    
    if (projectFile != null) {
      if (projectFile.size > 0) {
        if (projectFile.size < maxFileSize) {
          ret = new Future.value(true);
          FileReader reader = new FileReader();
          reader.onLoadEnd.listen((e) {
            ProjectDao.uploadProjectFile(project.id, userId, projectFile.name, e.target.result);
          });
          reader.readAsArrayBuffer(projectFile);
        } else {
          createProjectError = new SafeHtml.unsafe("<span>File is too large to upload, max file size is " 
                                                + (maxFileSize / 1024 / 1024).toString() + "MB</span>");
        }
      } else {
        createProjectError = Localisation.getTranslationSafe("project_create_17");
        ret = new Future.value(false);
      }
    } else {
      ret = new Future.value(false);
    }
    
    return ret;
  }
  
  bool validateInput()
  {
    bool ret = true;
    if (project.title == '') {
      titleError = new SafeHtml.unsafe("<span>" + Localisation.getTranslation("project_routehandler_12") + "</span>");
      ret = false;
    }
    if (project.description == '') {
      descriptionError = new SafeHtml.unsafe("<span>" + Localisation.getTranslation("project_routehandler_14") + "</span>");
      ret = false;
    }
    if (project.impact == '') {
      impactError = new SafeHtml.unsafe("<span>" + Localisation.getTranslation("project_routehandler_15") + "</span>");
      ret = false;
    }
    if (wordCountInput != null && wordCountInput != '') {
      project.wordCount = int.parse(wordCountInput, onError: (String wordCountString) {
        wordCountError = new SafeHtml.unsafe("<span>" + Localisation.getTranslation("project_routehandler_16") + "</span>");
        ret = false;
        return 0;
      });
    } else {
      wordCountError = new SafeHtml.unsafe("<span>" + Localisation.getTranslation("project_routehandler_16") + "</span>");
      ret = false;
    }
    InputElement deadlineInput = query("#deadline");
    if (deadlineInput.value != '') {
      DateTime projectDeadline = parseDeadline(deadlineInput.value);
      if (projectDeadline != null) {
        String monthAsString = projectDeadline.month.toString();
        monthAsString = monthAsString.length == 1 ? "0$monthAsString" : monthAsString;
        String dayAsString = projectDeadline.day.toString();
        dayAsString = dayAsString.length == 1 ? "0$dayAsString" : dayAsString;
        String hourAsString = projectDeadline.hour.toString();
        hourAsString = hourAsString.length > 2 ? "0$hourAsString" : hourAsString;
        String minuteAsString = projectDeadline.minute.toString();
        minuteAsString = minuteAsString.length < 2 ? "0$minuteAsString" : minuteAsString;
        project.deadline = projectDeadline.year.toString() + "-" + monthAsString + "-" + dayAsString
            + " " + hourAsString + ":" + minuteAsString + ":00";
      } else {
        deadlineError = new SafeHtml.unsafe("<span>" + Localisation.getTranslation("project_routehandler_13") + "</span>");
        ret = false;
      }
    } else {
      deadlineError = new SafeHtml.unsafe("<span>" + Localisation.getTranslation("project_routehandler_13") + "<span>");
      ret = false;
    }
    return ret;
  }
  
  DateTime parseDeadline(String deadlineText)
  {
    //Assumes deadline is in a format like "31 July 2013 10:50 UTC"
    DateTime ret;
    try {
      int startIndex = 0;
      int endIndex = deadlineText.indexOf(" ");
      String day = deadlineText.substring(startIndex, endIndex).toString();
      startIndex = endIndex + 1;
      endIndex = deadlineText.indexOf(" ", startIndex);
      String month = deadlineText.substring(startIndex, endIndex);
      startIndex = endIndex + 1;
      endIndex = deadlineText.indexOf(" ", startIndex);
      String year = deadlineText.substring(startIndex, endIndex);
      startIndex = endIndex + 1;
      endIndex = deadlineText.indexOf(":", startIndex);
      String hour = deadlineText.substring(startIndex, endIndex);
      startIndex = endIndex + 1;
      endIndex = deadlineText.indexOf(" ", startIndex);
      String minute = deadlineText.substring(startIndex, endIndex);
      
      int monthNum = 0;
      month = month.toLowerCase();
      switch (month) {
        case "january":
          monthNum = 1;
          break;
        case "february":
          monthNum = 2;
          break;
        case "march":
          monthNum = 3;
          break;
        case "april": 
          monthNum = 4;
          break;
        case "may":
          monthNum = 5;
          break;
        case "june":
          monthNum = 6;
          break;
        case "july":
          monthNum = 7;
          break;
        case "august":
          monthNum = 8;
          break;
        case "september":
          monthNum = 9;
          break;
        case "october":
          monthNum = 10;
          break;
        case "november":
          monthNum = 11;
          break;
        case "december":
          monthNum = 12;
          break;
        default:
          monthNum = 0;
      }
      ret = new DateTime(int.parse(year), monthNum, int.parse(day), 
          int.parse(hour), int.parse(minute));
    } catch(e) {
      deadlineError = new SafeHtml.unsafe("<span>" + Localisation.getTranslation("project_routehandler_13") + "</span>");
    }
    return ret;
  }
  
  bool isError()
  {
    bool ret;
    if (titleError == null && descriptionError == null && wordCountError == null && deadlineError == null &&
        impactError == null && targetLanguageError == null && uniqueLanguageCountryError == null && 
        fileUploadError == null) {
      ret = false;
    } else {
      ret = true;
    }
    return ret;
  }
  
  List<String> separateTags(String tags)
  {
    return tags.split(" ");
  }
  
  void segmentationClicked(InputElement target)
  {
    int index = int.parse(target.id.substring(target.id.indexOf("_") + 1));
    InputElement transCheckbox = query("#translation_$index");
    InputElement proofCheckbox = query("#proofreading_$index");
    if (target.checked) {
      transCheckbox.checked = false;
      transCheckbox.disabled = true;
      proofCheckbox.checked = false;
      proofCheckbox.disabled = true;
    } else {
      transCheckbox.disabled = false;
      proofCheckbox.disabled = false;
    }
  }
  
  File getProjectFile()
  {
    File projectFile = null;
    InputElement fileInput = query("#projectFile");
    FileList files = fileInput.files;
    if (!files.isEmpty) {
      projectFile = files[0];
    }
    return projectFile;
  }
}

//# sourceMappingURL=ProjectCreateForm.dart.map
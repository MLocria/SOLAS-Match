// Auto-generated from ClaimedTasksStream.html.
// DO NOT EDIT.

library SolasMatchDart;

import 'dart:html' as autogenerated;
import 'dart:svg' as autogenerated_svg;
import 'package:web_ui/web_ui.dart' as autogenerated;
import 'package:web_ui/observe/observable.dart' as __observe;
import "package:web_ui/web_ui.dart";
import "dart:async";
import "dart:html";
import "dart:json";
import '../../DataAccessObjects/UserDao.dart';
import '../../DataAccessObjects/TaskDao.dart';
import '../../DataAccessObjects/ProjectDao.dart';
import '../../DataAccessObjects/OrgDao.dart';
import '../../DataAccessObjects/LanguageDao.dart';
import '../../lib/models/Task.dart';
import '../../lib/models/Tag.dart';
import '../../lib/models/Project.dart';
import '../../lib/models/Org.dart';
import '../../lib/models/Language.dart';
import '../../lib/Settings.dart';
import '../../lib/Localisation.dart';



class ClaimedTasksStream extends WebComponent with Observable 
{
  /** Autogenerated from the template. */

  autogenerated.ScopedCssMapper _css;

  /** This field is deprecated, use getShadowRoot instead. */
  get _root => getShadowRoot("x-claimed-tasks-stream");
  static final __html1 = new autogenerated.Element.tag('template'), __html10 = new autogenerated.Element.html('<span class="label label-info" style="background-color: {{taskFourColour}}"></span>'), __html11 = new autogenerated.Element.tag('strong'), __html12 = new autogenerated.Element.tag('strong'), __html13 = new autogenerated.Element.tag('template'), __html14 = new autogenerated.Element.html('<a class="label"><span class="label"></span></a>'), __html15 = new autogenerated.Element.tag('strong'), __html16 = new autogenerated.Element.tag('strong'), __html17 = new autogenerated.Element.tag('strong'), __html18 = new autogenerated.Element.tag('template'), __html19 = new autogenerated.ParagraphElement(), __html2 = new autogenerated.Element.html('<div class="task" style="word-break: break-all; overflow-wrap: break-word;">\n              <h2>\n                <a></a>\n              </h2>\n              <p></p>\n              <p></p>\n              <p></p>\n              <p>\n                <template></template>\n              </p>\n              <p></p>\n              <p class="task_details"></p>\n              <p></p>\n              <template></template>\n              <p>\n                <a class="btn btn-small btn-primary"></a>\n              </p>\n              <br>\n            </div>'), __html20 = new autogenerated.AnchorElement(), __html21 = new autogenerated.AnchorElement(), __html22 = new autogenerated.ParagraphElement(), __html3 = new autogenerated.Element.tag('template'), __html4 = new autogenerated.Element.html('<span class="label label-info" style="background-color: {{taskOneColour}}"></span>'), __html5 = new autogenerated.Element.tag('template'), __html6 = new autogenerated.Element.html('<span class="label label-info" style="background-color: {{taskTwoColour}}"></span>'), __html7 = new autogenerated.Element.tag('template'), __html8 = new autogenerated.Element.html('<span class="label label-info" style="background-color: {{taskThreeColour}}"></span>'), __html9 = new autogenerated.Element.tag('template'), __shadowTemplate = new autogenerated.DocumentFragment.html('''
        <template></template>
        <template></template>
        <div class="pagination pagination-centered">
          <ul>
            <li>
              <a id="firstPage" title="First">&lt;&lt;</a>
            </li>
            <li>
              <a id="previousPage" title="Previous">&lt;</a>
            </li>
            <li>
              <a></a>
            </li>
            <li>
              <a id="nextPage" title="Next">&gt;</a>
            </li>
            <li>
              <a id="lastPage" title="Last">&gt;&gt;</a>
            </li>
          </ul>
        </div>
      ''');
  autogenerated.AnchorElement __e65;
  autogenerated.Element __e57, __e60;
  autogenerated.Template __t;

  void created_autogenerated() {
    var __root = createShadowRoot("x-claimed-tasks-stream");
    setScopedCss("x-claimed-tasks-stream", new autogenerated.ScopedCssMapper({"x-claimed-tasks-stream":"[is=\"x-claimed-tasks-stream\"]"}));
    _css = getScopedCss("x-claimed-tasks-stream");
    __t = new autogenerated.Template(__root);
    __root.nodes.add(__shadowTemplate.clone(true));
    __e57 = __root.nodes[1];
    __t.conditional(__e57, () => tasks.length > 0, (__t) {
      var __e56;
      __e56 = __html1.clone(true);
      __t.loop(__e56, () => tasks, ($list, $index, __t) {
        var task = $list[$index];
        var __e1, __e11, __e14, __e15, __e19, __e20, __e24, __e25, __e30, __e33, __e34, __e37, __e39, __e42, __e43, __e5, __e52, __e54, __e55, __e8;
        __e55 = __html2.clone(true);
        __e1 = __e55.nodes[1].nodes[1];
        var __binding0 = __t.contentBind(() => task.title, false);
        __e1.nodes.addAll([new autogenerated.Text('\n                  '),
            __binding0,
            new autogenerated.Text('\n                ')]);
        __t.bind(() => [siteAddress, task.id],  (__e) { __e1.href = autogenerated.sanitizeUri('${__e.newValue[0]}task/${__e.newValue[1]}/id'); }, false);
        __e15 = __e55.nodes[3];
        var __binding2 = __t.contentBind(() => Localisation.getTranslationSafe("common_type"), false);
        __e5 = __html3.clone(true);
        __t.conditional(__e5, () => task.taskType == 1, (__t) {
          var __e4;
          __e4 = __html4.clone(true);
          var __binding3 = __t.contentBind(() => Localisation.getTranslationSafe("common_segmentation"), false);
          __e4.nodes.addAll([new autogenerated.Text('\n                    '),
              __binding3,
              new autogenerated.Text('\n                  ')]);
          __t.bind(() => taskOneColour,  (__e) { __e4.attributes['style'] = 'background-color: ${__e.newValue}'; }, false);
        __t.addAll([new autogenerated.Text('\n                  '),
            __e4,
            new autogenerated.Text('\n                ')]);
        });

        __e8 = __html5.clone(true);
        __t.conditional(__e8, () => task.taskType == 2, (__t) {
          var __e7;
          __e7 = __html6.clone(true);
          var __binding6 = __t.contentBind(() => Localisation.getTranslationSafe("common_translation"), false);
          __e7.nodes.addAll([new autogenerated.Text('\n                    '),
              __binding6,
              new autogenerated.Text('\n                  ')]);
          __t.bind(() => taskTwoColour,  (__e) { __e7.attributes['style'] = 'background-color: ${__e.newValue}'; }, false);
        __t.addAll([new autogenerated.Text('\n                  '),
            __e7,
            new autogenerated.Text('\n                ')]);
        });

        __e11 = __html7.clone(true);
        __t.conditional(__e11, () => task.taskType == 3, (__t) {
          var __e10;
          __e10 = __html8.clone(true);
          var __binding9 = __t.contentBind(() => Localisation.getTranslationSafe("common_proofreading"), false);
          __e10.nodes.addAll([new autogenerated.Text('\n                    '),
              __binding9,
              new autogenerated.Text('\n                  ')]);
          __t.bind(() => taskThreeColour,  (__e) { __e10.attributes['style'] = 'background-color: ${__e.newValue}'; }, false);
        __t.addAll([new autogenerated.Text('\n                  '),
            __e10,
            new autogenerated.Text('\n                ')]);
        });

        __e14 = __html9.clone(true);
        __t.conditional(__e14, () => task.taskType == 4, (__t) {
          var __e13;
          __e13 = __html10.clone(true);
          var __binding12 = __t.contentBind(() => Localisation.getTranslationSafe("common_desegmentation"), false);
          __e13.nodes.addAll([new autogenerated.Text('\n                    '),
              __binding12,
              new autogenerated.Text('\n                  ')]);
          __t.bind(() => taskFourColour,  (__e) { __e13.attributes['style'] = 'background-color: ${__e.newValue}'; }, false);
        __t.addAll([new autogenerated.Text('\n                  '),
            __e13,
            new autogenerated.Text('              \n                ')]);
        });

        __e15.nodes.addAll([__binding2,
            new autogenerated.Text(':\n                '),
            __e5,
            new autogenerated.Text('\n                '),
            __e8,
            new autogenerated.Text('\n                '),
            __e11,
            new autogenerated.Text('\n                '),
            __e14,
            new autogenerated.Text('\n              ')]);
        __e20 = __e55.nodes[5];
        var __binding16 = __t.contentBind(() => Localisation.getTranslationSafe("common_from"), false);
        __e19 = __html11.clone(true);
        var __binding17 = __t.contentBind(() => task.sourceLocale.languageName, false);
        var __binding18 = __t.contentBind(() => task.sourceLocale.countryName, false);
        __e19.nodes.addAll([__binding17,
            new autogenerated.Text(' - '),
            __binding18,
            new autogenerated.Text(' ')]);
        __e20.nodes.addAll([new autogenerated.Text('\n                '),
            __binding16,
            new autogenerated.Text(': \n                '),
            __e19,
            new autogenerated.Text('\n              ')]);
        __e25 = __e55.nodes[7];
        var __binding21 = __t.contentBind(() => Localisation.getTranslationSafe("common_to"), false);
        __e24 = __html12.clone(true);
        var __binding22 = __t.contentBind(() => task.targetLocale.languageName, false);
        var __binding23 = __t.contentBind(() => task.targetLocale.countryName, false);
        __e24.nodes.addAll([__binding22,
            new autogenerated.Text(' - '),
            __binding23]);
        __e25.nodes.addAll([new autogenerated.Text('\n                '),
            __binding21,
            new autogenerated.Text(': \n                '),
            __e24,
            new autogenerated.Text('\n              ')]);
        __e30 = __e55.nodes[9].nodes[1];
        __t.conditional(__e30, () => taskTags[task.id].length > 0, (__t) {
          var __e29;
          __e29 = __html13.clone(true);
          __t.loop(__e29, () => taskTags[task.id], ($list, $index, __t) {
            var tag = $list[$index];
            var __e27, __e28;
            __e28 = __html14.clone(true);
            __e27 = __e28.nodes[0];
            var __binding26 = __t.contentBind(() => tag.label, false);
            __e27.nodes.add(__binding26);
            __t.bind(() => [siteAddress, tag.id],  (__e) { __e28.href = autogenerated.sanitizeUri('${__e.newValue[0]}tag/${__e.newValue[1]}'); }, false);
          __t.addAll([new autogenerated.Text('\n                    '),
              __e28,
              new autogenerated.Text('\n                  ')]);
          });
        __t.addAll([new autogenerated.Text('\n                  '),
            __e29,
            new autogenerated.Text('\n                ')]);
        });

        __e34 = __e55.nodes[11];
        var __binding31 = __t.contentBind(() => Localisation.getTranslationSafe("common_word_count"), false);
        __e33 = __html15.clone(true);
        var __binding32 = __t.contentBind(() => task.wordCount, false);
        __e33.nodes.add(__binding32);
        __e34.nodes.addAll([new autogenerated.Text('\n                '),
            __binding31,
            new autogenerated.Text(': '),
            __e33,
            new autogenerated.Text('\n              ')]);
        __e39 = __e55.nodes[13];
        var __binding35 = __t.contentBind(() => Localisation.getTranslationSafe("common_added"), false);
        __e37 = __html16.clone(true);
        var __binding36 = __t.contentBind(() => taskAges[task.id], false);
        __e37.nodes.add(__binding36);
        var __binding38 = __t.contentBind(() => Localisation.getTranslationSafe("common_ago"), false);
        __e39.nodes.addAll([new autogenerated.Text('\n                '),
            __binding35,
            new autogenerated.Text(': '),
            __e37,
            new autogenerated.Text(' \n                '),
            __binding38,
            new autogenerated.Text('\n              ')]);
        __e43 = __e55.nodes[15];
        var __binding40 = __t.contentBind(() => Localisation.getTranslationSafe("common_due_by"), false);
        __e42 = __html17.clone(true);
        var __binding41 = __t.contentBind(() => task.deadline, false);
        __e42.nodes.add(__binding41);
        __e43.nodes.addAll([new autogenerated.Text('\n                '),
            __binding40,
            new autogenerated.Text(': '),
            __e42,
            new autogenerated.Text('\n              ')]);
        __e52 = __e55.nodes[17];
        __t.conditional(__e52, () => projectMap[task.projectId] != null, (__t) {
          var __e51;
          __e51 = __html18.clone(true);
          __t.conditional(__e51, () => orgMap[projectMap[task.projectId].organisationId] != null, (__t) {
            var __e46, __e49, __e50;
            __e50 = __html19.clone(true);
            var __binding44 = __t.contentBind(() => Localisation.getTranslationSafe("common_part_of"), false);
            __e46 = __html20.clone(true);
            var __binding45 = __t.contentBind(() => projectMap[task.projectId].title, false);
            __e46.nodes.addAll([new autogenerated.Text('\n                      '),
                __binding45,
                new autogenerated.Text('\n                    ')]);
            __t.bind(() => [siteAddress, projectMap[task.projectId].id],  (__e) { __e46.href = autogenerated.sanitizeUri('${__e.newValue[0]}project/${__e.newValue[1]}/view'); }, false);
            var __binding47 = __t.contentBind(() => Localisation.getTranslationSafe("common_for"), false);
            __e49 = __html21.clone(true);
            var __binding48 = __t.contentBind(() => orgMap[projectMap[task.projectId].organisationId].name, false);
            __e49.nodes.addAll([new autogenerated.Text('\n                      '),
                __binding48,
                new autogenerated.Text('\n                    ')]);
            __t.bind(() => [siteAddress, orgMap[projectMap[task.projectId].organisationId].id],  (__e) { __e49.href = autogenerated.sanitizeUri('${__e.newValue[0]}org/${__e.newValue[1]}/profile'); }, false);
            __e50.nodes.addAll([new autogenerated.Text('\n                    '),
                __binding44,
                new autogenerated.Text(':\n                    '),
                __e46,
                new autogenerated.Text('\n                    '),
                __binding47,
                new autogenerated.Text('\n                    '),
                __e49,
                new autogenerated.Text('\n                  ')]);
          __t.addAll([new autogenerated.Text('\n                  '),
              __e50,
              new autogenerated.Text('\n                ')]);
          });

        __t.addAll([new autogenerated.Text('\n                '),
            __e51,
            new autogenerated.Text('\n              ')]);
        });

        __e54 = __e55.nodes[19].nodes[1];
        var __binding53 = __t.contentBind(() => Localisation.getTranslationSafe("claimed_tasks_task_reviews"), false);
        __e54.nodes.addAll([new autogenerated.Text('\n                  '),
            __binding53,
            new autogenerated.Text('\n                ')]);
        __t.bind(() => [siteAddress, task.id],  (__e) { __e54.href = autogenerated.sanitizeUri('${__e.newValue[0]}user/task/${__e.newValue[1]}/reviews'); }, false);
      __t.addAll([new autogenerated.Text('\n            '),
          __e55,
          new autogenerated.Text('\n          ')]);
      });
    __t.addAll([new autogenerated.Text('\n          '),
        __e56,
        new autogenerated.Text('\n        ')]);
    });

    __e60 = __root.nodes[3];
    __t.conditional(__e60, () => !(tasks.length > 0), (__t) {
      var __e59;
      __e59 = __html22.clone(true);
      var __binding58 = __t.contentBind(() => Localisation.getTranslationSafe("index_no_tasks_available"), false);
      __e59.nodes.add(__binding58);
    __t.addAll([new autogenerated.Text('\n          '),
        __e59,
        new autogenerated.Text('\n        ')]);
    });

    __e65 = __root.nodes[5].nodes[1].nodes[5].nodes[1];
    var __binding61 = __t.contentBind(() => Localisation.getTranslation("pagination_page"), false);
    var __binding62 = __t.contentBind(() => currentPage + 1, false);
    var __binding63 = __t.contentBind(() => Localisation.getTranslation("pagination_of"), false);
    var __binding64 = __t.contentBind(() => lastPage, false);
    __e65.nodes.addAll([new autogenerated.Text('\n                '),
        __binding61,
        new autogenerated.Text(' '),
        __binding62,
        new autogenerated.Text(' \n                '),
        __binding63,
        new autogenerated.Text(' '),
        __binding64,
        new autogenerated.Text('\n              ')]);
    __t.create();
  }

  void inserted_autogenerated() {
    __t.insert();
  }

  void removed_autogenerated() {
    __t.remove();
    __t = __e57 = __e60 = __e65 = null;
  }

  /** Original code from the component. */

  int userId = 0;
  int tasksPerPage = 10;
  int taskTypeCount = 4;
  DateTime currentDateTime;
  String siteAddress;
  String taskOneColour;
  String taskTwoColour;
  String taskThreeColour;
  String taskFourColour;
  List<Task> allTasks;
  List<Task> __$tasks;
  List<Task> get tasks {
    if (__observe.observeReads) {
      __observe.notifyRead(this, __observe.ChangeRecord.FIELD, 'tasks');
    }
    return __$tasks;
  }
  set tasks(List<Task> value) {
    if (__observe.hasObservers(this)) {
      __observe.notifyChange(this, __observe.ChangeRecord.FIELD, 'tasks',
          __$tasks, value);
    }
    __$tasks = value;
  }
  Map<int, String> __$taskAges;
  Map<int, String> get taskAges {
    if (__observe.observeReads) {
      __observe.notifyRead(this, __observe.ChangeRecord.FIELD, 'taskAges');
    }
    return __$taskAges;
  }
  set taskAges(Map<int, String> value) {
    if (__observe.hasObservers(this)) {
      __observe.notifyChange(this, __observe.ChangeRecord.FIELD, 'taskAges',
          __$taskAges, value);
    }
    __$taskAges = value;
  }
  Map<int, Project> __$projectMap;
  Map<int, Project> get projectMap {
    if (__observe.observeReads) {
      __observe.notifyRead(this, __observe.ChangeRecord.FIELD, 'projectMap');
    }
    return __$projectMap;
  }
  set projectMap(Map<int, Project> value) {
    if (__observe.hasObservers(this)) {
      __observe.notifyChange(this, __observe.ChangeRecord.FIELD, 'projectMap',
          __$projectMap, value);
    }
    __$projectMap = value;
  }
  Map<int, Organisation> __$orgMap;
  Map<int, Organisation> get orgMap {
    if (__observe.observeReads) {
      __observe.notifyRead(this, __observe.ChangeRecord.FIELD, 'orgMap');
    }
    return __$orgMap;
  }
  set orgMap(Map<int, Organisation> value) {
    if (__observe.hasObservers(this)) {
      __observe.notifyChange(this, __observe.ChangeRecord.FIELD, 'orgMap',
          __$orgMap, value);
    }
    __$orgMap = value;
  }
  Map<int, List<Tag>> __$taskTags;
  Map<int, List<Tag>> get taskTags {
    if (__observe.observeReads) {
      __observe.notifyRead(this, __observe.ChangeRecord.FIELD, 'taskTags');
    }
    return __$taskTags;
  }
  set taskTags(Map<int, List<Tag>> value) {
    if (__observe.hasObservers(this)) {
      __observe.notifyChange(this, __observe.ChangeRecord.FIELD, 'taskTags',
          __$taskTags, value);
    }
    __$taskTags = value;
  }
  int __$currentPage = 0;
  int get currentPage {
    if (__observe.observeReads) {
      __observe.notifyRead(this, __observe.ChangeRecord.FIELD, 'currentPage');
    }
    return __$currentPage;
  }
  set currentPage(int value) {
    if (__observe.hasObservers(this)) {
      __observe.notifyChange(this, __observe.ChangeRecord.FIELD, 'currentPage',
          __$currentPage, value);
    }
    __$currentPage = value;
  }
  int __$lastPage = 0;
  int get lastPage {
    if (__observe.observeReads) {
      __observe.notifyRead(this, __observe.ChangeRecord.FIELD, 'lastPage');
    }
    return __$lastPage;
  }
  set lastPage(int value) {
    if (__observe.hasObservers(this)) {
      __observe.notifyChange(this, __observe.ChangeRecord.FIELD, 'lastPage',
          __$lastPage, value);
    }
    __$lastPage = value;
  }

  ClaimedTasksStream()
  {
    Settings settings = new Settings();
    currentDateTime = new DateTime.now();
    siteAddress = settings.conf.urls.SiteLocation;
    taskOneColour = settings.conf.task_colours.colour_1;
    taskTwoColour = settings.conf.task_colours.colour_2;
    taskThreeColour = settings.conf.task_colours.colour_3;
    taskFourColour = settings.conf.task_colours.colour_4;
    tasks = toObservable(new List<Task>());
    taskAges = toObservable(new Map<int, String>());
    projectMap = toObservable(new Map<int, Project>());
    orgMap = toObservable(new Map<int, Organisation>());
    taskTags = toObservable(new Map<int, List<Tag>>());
  }
  
  void inserted()
  {
    List<Future<bool>> successList = new List<Future<bool>>();
    currentPage = 0;
    if (tasksPerPage > 0) {
      successList.add(UserDao.getUserClaimedTasksCount(userId)
      .then((int count) {
        bool success = false;
        if (count > 0) {
          num tmp = count / tasksPerPage;
          lastPage = tmp.ceil();
          success = true;
        }
        return success;
      }));
    }
    successList.add(this.getClaimedTasks());
    Future.wait(successList)
      .then((List<bool> successes) {
        bool finished = true;
        successes.forEach((bool tmp) {
          if (!tmp) {
            finished = false;
          }
        });
        if (!finished) {
          print("Something failed");
        }
      });
    AnchorElement button;
    button = query("#firstPage");
    button.onClick.listen((e) => this.goToFirstPage());
    button = query("#previousPage");
    button.onClick.listen((e) => this.goToPreviousPage());
    button = query("#nextPage");
    button.onClick.listen((e) => this.goToNextPage());
    button = query("#lastPage");
    button.onClick.listen((e) => this.goToLastPage());
  }
  
  Future<bool> getClaimedTasks()
  {
    Future<bool> ret;
    if (userId > 0) {
      ret = this.addTasks();
    } else {
      ret = new Future.value(false);
    }
    return ret;
  }
  
  Future<bool> addTasks()
  {
    int offset = currentPage * tasksPerPage;
    return UserDao.getUserTasks(userId, offset, tasksPerPage)
      .then((List<Task> userTasks) {
        tasks.clear();
        projectMap.clear();
        orgMap.clear();
        taskAges.clear();
        taskTags.clear();
        if (userTasks.length > 0) {
          userTasks.forEach((Task task) {
            this.addTask(task);
          });
        }
        this.updatePagination();
        return true;
      });
  }
  
  void addTask(Task task)
  {
    tasks.add(task);
    DateTime taskTime = DateTime.parse(task.createdTime);
    Duration dur = currentDateTime.difference(taskTime);
    if (dur.inDays > 0) {
      taskAges[task.id] = dur.inDays.toString() + " day(s)";
    } else if (dur.inHours > 0) {
      taskAges[task.id] = dur.inHours.toString() + " hour(s)";
    } else if (dur.inMinutes > 0) {
      taskAges[task.id] = dur.inMinutes.toString() + " minutes(s)";
    } else {
      taskAges[task.id] = dur.inSeconds.toString() + " second(s)";
    }
    taskTags[task.id] = new List<Tag>();
    TaskDao.getTaskTags(task.id).then((List<Tag> tags) {
      taskTags[task.id] = tags;
    });
    if (!projectMap.containsKey(task.projectId)) {
      ProjectDao.getProject(task.projectId).then((Project proj) {
        projectMap[proj.id] = proj;
        OrgDao.getOrg(proj.organisationId).then((Organisation org) {
          orgMap[org.id] = org;
        });
      });
    }
  }
  
  void updatePagination()
  {
    if (currentPage < 1) {
      AnchorElement button;
      button = query("#firstPage");
      button.parent.classes.add("disabled");
      button = query("#previousPage");
      button.parent.classes.add("disabled");
    } else {
      AnchorElement button;
      button = query("#firstPage");
      button.parent.classes.remove("disabled");
      button = query("#previousPage");
      button.parent.classes.remove("disabled");
    }
    
    if (currentPage >= lastPage - 1) {
      AnchorElement button;
      button = query("#nextPage");
      button.parent.classes.add("disabled");
      button = query("#lastPage");
      button.parent.classes.add("disabled");
    } else {
      AnchorElement button;
      button = query("#nextPage");
      button.parent.classes.remove("disabled");
      button = query("#lastPage");
      button.parent.classes.remove("disabled");
    }
  }
  
  void goToFirstPage()
  {
    print("Going to first page");
    if (currentPage != 0) {
      currentPage = 0;
      this.addTasks();
    }
  }
  
  void goToPreviousPage()
  {
    print("Going to previous page");
    if (currentPage > 0) {
      currentPage--;
      this.addTasks();
    }
  }
  
  void goToNextPage()
  {
    print("Going to next page");
    if (currentPage < lastPage - 1) {
      currentPage++;
      this.addTasks();
    }
  }
  
  void goToLastPage()
  {
    print("Going to last page");
    if (currentPage < lastPage - 1) {
      currentPage = lastPage - 1;
      this.addTasks();
    }
  }
}
//# sourceMappingURL=ClaimedTasksStream.dart.map